
DigitalFilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d7c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003f04  08003f04  00013f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f4c  08003f4c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f4c  08003f4c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f4c  08003f4c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f4c  08003f4c  00013f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f50  08003f50  00013f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  08003f60  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08003f60  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001150c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020b3  00000000  00000000  00031548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00033600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec8  00000000  00000000  000345c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000276ec  00000000  00000000  00035488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a12  00000000  00000000  0005cb74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdcae  00000000  00000000  0006d586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016b234  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042c0  00000000  00000000  0016b288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003eec 	.word	0x08003eec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003eec 	.word	0x08003eec

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fa87 	bl	80006e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f817 	bl	8000204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f8d1 	bl	800037c <MX_GPIO_Init>
  MX_ADC1_Init();
 80001da:	f000 f859 	bl	8000290 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80001de:	217f      	movs	r1, #127	; 0x7f
 80001e0:	4807      	ldr	r0, [pc, #28]	; (8000200 <main+0x38>)
 80001e2:	f001 fcc1 	bl	8001b68 <HAL_ADCEx_Calibration_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80001e6:	4806      	ldr	r0, [pc, #24]	; (8000200 <main+0x38>)
 80001e8:	f000 fe1a 	bl	8000e20 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, UINT32_MAX);
 80001ec:	f04f 31ff 	mov.w	r1, #4294967295
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <main+0x38>)
 80001f2:	f000 fecf 	bl	8000f94 <HAL_ADC_PollForConversion>
	  value = HAL_ADC_GetValue(&hadc1);
 80001f6:	4802      	ldr	r0, [pc, #8]	; (8000200 <main+0x38>)
 80001f8:	f000 ffa4 	bl	8001144 <HAL_ADC_GetValue>
 80001fc:	6078      	str	r0, [r7, #4]
	  HAL_ADC_Start(&hadc1);
 80001fe:	e7f2      	b.n	80001e6 <main+0x1e>
 8000200:	20000028 	.word	0x20000028

08000204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b096      	sub	sp, #88	; 0x58
 8000208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020a:	f107 0314 	add.w	r3, r7, #20
 800020e:	2244      	movs	r2, #68	; 0x44
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f003 fe62 	bl	8003edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000218:	463b      	mov	r3, r7
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
 800021e:	605a      	str	r2, [r3, #4]
 8000220:	609a      	str	r2, [r3, #8]
 8000222:	60da      	str	r2, [r3, #12]
 8000224:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000226:	f44f 7000 	mov.w	r0, #512	; 0x200
 800022a:	f002 f847 	bl	80022bc <HAL_PWREx_ControlVoltageScaling>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d001      	beq.n	8000238 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000234:	f000 f8d8 	bl	80003e8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000238:	2310      	movs	r3, #16
 800023a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800023c:	2301      	movs	r3, #1
 800023e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000240:	2300      	movs	r3, #0
 8000242:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000244:	2360      	movs	r3, #96	; 0x60
 8000246:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000248:	2300      	movs	r3, #0
 800024a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024c:	f107 0314 	add.w	r3, r7, #20
 8000250:	4618      	mov	r0, r3
 8000252:	f002 f889 	bl	8002368 <HAL_RCC_OscConfig>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800025c:	f000 f8c4 	bl	80003e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000260:	230f      	movs	r3, #15
 8000262:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000264:	2300      	movs	r3, #0
 8000266:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000274:	463b      	mov	r3, r7
 8000276:	2100      	movs	r1, #0
 8000278:	4618      	mov	r0, r3
 800027a:	f002 fc5b 	bl	8002b34 <HAL_RCC_ClockConfig>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000284:	f000 f8b0 	bl	80003e8 <Error_Handler>
  }
}
 8000288:	bf00      	nop
 800028a:	3758      	adds	r7, #88	; 0x58
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}

08000290 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b08a      	sub	sp, #40	; 0x28
 8000294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000296:	f107 031c 	add.w	r3, r7, #28
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	605a      	str	r2, [r3, #4]
 80002aa:	609a      	str	r2, [r3, #8]
 80002ac:	60da      	str	r2, [r3, #12]
 80002ae:	611a      	str	r2, [r3, #16]
 80002b0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002b2:	4b2f      	ldr	r3, [pc, #188]	; (8000370 <MX_ADC1_Init+0xe0>)
 80002b4:	4a2f      	ldr	r2, [pc, #188]	; (8000374 <MX_ADC1_Init+0xe4>)
 80002b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002b8:	4b2d      	ldr	r3, [pc, #180]	; (8000370 <MX_ADC1_Init+0xe0>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002be:	4b2c      	ldr	r3, [pc, #176]	; (8000370 <MX_ADC1_Init+0xe0>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002c4:	4b2a      	ldr	r3, [pc, #168]	; (8000370 <MX_ADC1_Init+0xe0>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002ca:	4b29      	ldr	r3, [pc, #164]	; (8000370 <MX_ADC1_Init+0xe0>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002d0:	4b27      	ldr	r3, [pc, #156]	; (8000370 <MX_ADC1_Init+0xe0>)
 80002d2:	2204      	movs	r2, #4
 80002d4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002d6:	4b26      	ldr	r3, [pc, #152]	; (8000370 <MX_ADC1_Init+0xe0>)
 80002d8:	2200      	movs	r2, #0
 80002da:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002dc:	4b24      	ldr	r3, [pc, #144]	; (8000370 <MX_ADC1_Init+0xe0>)
 80002de:	2200      	movs	r2, #0
 80002e0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80002e2:	4b23      	ldr	r3, [pc, #140]	; (8000370 <MX_ADC1_Init+0xe0>)
 80002e4:	2201      	movs	r2, #1
 80002e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002e8:	4b21      	ldr	r3, [pc, #132]	; (8000370 <MX_ADC1_Init+0xe0>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002f0:	4b1f      	ldr	r3, [pc, #124]	; (8000370 <MX_ADC1_Init+0xe0>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002f6:	4b1e      	ldr	r3, [pc, #120]	; (8000370 <MX_ADC1_Init+0xe0>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80002fc:	4b1c      	ldr	r3, [pc, #112]	; (8000370 <MX_ADC1_Init+0xe0>)
 80002fe:	2200      	movs	r2, #0
 8000300:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000304:	4b1a      	ldr	r3, [pc, #104]	; (8000370 <MX_ADC1_Init+0xe0>)
 8000306:	2200      	movs	r2, #0
 8000308:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800030a:	4b19      	ldr	r3, [pc, #100]	; (8000370 <MX_ADC1_Init+0xe0>)
 800030c:	2200      	movs	r2, #0
 800030e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000312:	4817      	ldr	r0, [pc, #92]	; (8000370 <MX_ADC1_Init+0xe0>)
 8000314:	f000 fc2e 	bl	8000b74 <HAL_ADC_Init>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800031e:	f000 f863 	bl	80003e8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000322:	2300      	movs	r3, #0
 8000324:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000326:	f107 031c 	add.w	r3, r7, #28
 800032a:	4619      	mov	r1, r3
 800032c:	4810      	ldr	r0, [pc, #64]	; (8000370 <MX_ADC1_Init+0xe0>)
 800032e:	f001 fc7b 	bl	8001c28 <HAL_ADCEx_MultiModeConfigChannel>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000338:	f000 f856 	bl	80003e8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800033c:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <MX_ADC1_Init+0xe8>)
 800033e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000340:	2306      	movs	r3, #6
 8000342:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000344:	2300      	movs	r3, #0
 8000346:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000348:	237f      	movs	r3, #127	; 0x7f
 800034a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800034c:	2304      	movs	r3, #4
 800034e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000350:	2300      	movs	r3, #0
 8000352:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	4619      	mov	r1, r3
 8000358:	4805      	ldr	r0, [pc, #20]	; (8000370 <MX_ADC1_Init+0xe0>)
 800035a:	f000 ff01 	bl	8001160 <HAL_ADC_ConfigChannel>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000364:	f000 f840 	bl	80003e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000368:	bf00      	nop
 800036a:	3728      	adds	r7, #40	; 0x28
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20000028 	.word	0x20000028
 8000374:	50040000 	.word	0x50040000
 8000378:	10c00010 	.word	0x10c00010

0800037c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000382:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <MX_GPIO_Init+0x44>)
 8000384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000386:	4a0e      	ldr	r2, [pc, #56]	; (80003c0 <MX_GPIO_Init+0x44>)
 8000388:	f043 0304 	orr.w	r3, r3, #4
 800038c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800038e:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <MX_GPIO_Init+0x44>)
 8000390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000392:	f003 0304 	and.w	r3, r3, #4
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039a:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <MX_GPIO_Init+0x44>)
 800039c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800039e:	4a08      	ldr	r2, [pc, #32]	; (80003c0 <MX_GPIO_Init+0x44>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003a6:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <MX_GPIO_Init+0x44>)
 80003a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003aa:	f003 0301 	and.w	r3, r3, #1
 80003ae:	603b      	str	r3, [r7, #0]
 80003b0:	683b      	ldr	r3, [r7, #0]

}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	40021000 	.word	0x40021000

080003c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a04      	ldr	r2, [pc, #16]	; (80003e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d101      	bne.n	80003da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003d6:	f000 f9a3 	bl	8000720 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40012c00 	.word	0x40012c00

080003e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ec:	b672      	cpsid	i
}
 80003ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f0:	e7fe      	b.n	80003f0 <Error_Handler+0x8>
	...

080003f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003fa:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <HAL_MspInit+0x44>)
 80003fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003fe:	4a0e      	ldr	r2, [pc, #56]	; (8000438 <HAL_MspInit+0x44>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6613      	str	r3, [r2, #96]	; 0x60
 8000406:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <HAL_MspInit+0x44>)
 8000408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000412:	4b09      	ldr	r3, [pc, #36]	; (8000438 <HAL_MspInit+0x44>)
 8000414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000416:	4a08      	ldr	r2, [pc, #32]	; (8000438 <HAL_MspInit+0x44>)
 8000418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800041c:	6593      	str	r3, [r2, #88]	; 0x58
 800041e:	4b06      	ldr	r3, [pc, #24]	; (8000438 <HAL_MspInit+0x44>)
 8000420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000426:	603b      	str	r3, [r7, #0]
 8000428:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042a:	bf00      	nop
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	40021000 	.word	0x40021000

0800043c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b0ac      	sub	sp, #176	; 0xb0
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000444:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000448:	2200      	movs	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
 800044c:	605a      	str	r2, [r3, #4]
 800044e:	609a      	str	r2, [r3, #8]
 8000450:	60da      	str	r2, [r3, #12]
 8000452:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000454:	f107 0314 	add.w	r3, r7, #20
 8000458:	2288      	movs	r2, #136	; 0x88
 800045a:	2100      	movs	r1, #0
 800045c:	4618      	mov	r0, r3
 800045e:	f003 fd3d 	bl	8003edc <memset>
  if(hadc->Instance==ADC1)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a27      	ldr	r2, [pc, #156]	; (8000504 <HAL_ADC_MspInit+0xc8>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d146      	bne.n	80004fa <HAL_ADC_MspInit+0xbe>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800046c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000470:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000472:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000476:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800047a:	2301      	movs	r3, #1
 800047c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800047e:	2301      	movs	r3, #1
 8000480:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000482:	2310      	movs	r3, #16
 8000484:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000486:	2307      	movs	r3, #7
 8000488:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800048a:	2302      	movs	r3, #2
 800048c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800048e:	2302      	movs	r3, #2
 8000490:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000492:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000496:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000498:	f107 0314 	add.w	r3, r7, #20
 800049c:	4618      	mov	r0, r3
 800049e:	f002 fd6b 	bl	8002f78 <HAL_RCCEx_PeriphCLKConfig>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80004a8:	f7ff ff9e 	bl	80003e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80004ac:	4b16      	ldr	r3, [pc, #88]	; (8000508 <HAL_ADC_MspInit+0xcc>)
 80004ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b0:	4a15      	ldr	r2, [pc, #84]	; (8000508 <HAL_ADC_MspInit+0xcc>)
 80004b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004b8:	4b13      	ldr	r3, [pc, #76]	; (8000508 <HAL_ADC_MspInit+0xcc>)
 80004ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004c0:	613b      	str	r3, [r7, #16]
 80004c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c4:	4b10      	ldr	r3, [pc, #64]	; (8000508 <HAL_ADC_MspInit+0xcc>)
 80004c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c8:	4a0f      	ldr	r2, [pc, #60]	; (8000508 <HAL_ADC_MspInit+0xcc>)
 80004ca:	f043 0304 	orr.w	r3, r3, #4
 80004ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004d0:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <HAL_ADC_MspInit+0xcc>)
 80004d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d4:	f003 0304 	and.w	r3, r3, #4
 80004d8:	60fb      	str	r3, [r7, #12]
 80004da:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80004dc:	2308      	movs	r3, #8
 80004de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80004e2:	230b      	movs	r3, #11
 80004e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	2300      	movs	r3, #0
 80004ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80004f2:	4619      	mov	r1, r3
 80004f4:	4805      	ldr	r0, [pc, #20]	; (800050c <HAL_ADC_MspInit+0xd0>)
 80004f6:	f001 fd29 	bl	8001f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80004fa:	bf00      	nop
 80004fc:	37b0      	adds	r7, #176	; 0xb0
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	50040000 	.word	0x50040000
 8000508:	40021000 	.word	0x40021000
 800050c:	48000800 	.word	0x48000800

08000510 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08c      	sub	sp, #48	; 0x30
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000520:	2200      	movs	r2, #0
 8000522:	6879      	ldr	r1, [r7, #4]
 8000524:	2019      	movs	r0, #25
 8000526:	f001 fce7 	bl	8001ef8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800052a:	2019      	movs	r0, #25
 800052c:	f001 fd00 	bl	8001f30 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000530:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <HAL_InitTick+0x9c>)
 8000532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000534:	4a1d      	ldr	r2, [pc, #116]	; (80005ac <HAL_InitTick+0x9c>)
 8000536:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800053a:	6613      	str	r3, [r2, #96]	; 0x60
 800053c:	4b1b      	ldr	r3, [pc, #108]	; (80005ac <HAL_InitTick+0x9c>)
 800053e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000548:	f107 0210 	add.w	r2, r7, #16
 800054c:	f107 0314 	add.w	r3, r7, #20
 8000550:	4611      	mov	r1, r2
 8000552:	4618      	mov	r0, r3
 8000554:	f002 fc7e 	bl	8002e54 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000558:	f002 fc66 	bl	8002e28 <HAL_RCC_GetPCLK2Freq>
 800055c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800055e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000560:	4a13      	ldr	r2, [pc, #76]	; (80005b0 <HAL_InitTick+0xa0>)
 8000562:	fba2 2303 	umull	r2, r3, r2, r3
 8000566:	0c9b      	lsrs	r3, r3, #18
 8000568:	3b01      	subs	r3, #1
 800056a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800056c:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <HAL_InitTick+0xa4>)
 800056e:	4a12      	ldr	r2, [pc, #72]	; (80005b8 <HAL_InitTick+0xa8>)
 8000570:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000572:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <HAL_InitTick+0xa4>)
 8000574:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000578:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800057a:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <HAL_InitTick+0xa4>)
 800057c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800057e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000580:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <HAL_InitTick+0xa4>)
 8000582:	2200      	movs	r2, #0
 8000584:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <HAL_InitTick+0xa4>)
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800058c:	4809      	ldr	r0, [pc, #36]	; (80005b4 <HAL_InitTick+0xa4>)
 800058e:	f003 f9af 	bl	80038f0 <HAL_TIM_Base_Init>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d104      	bne.n	80005a2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000598:	4806      	ldr	r0, [pc, #24]	; (80005b4 <HAL_InitTick+0xa4>)
 800059a:	f003 fa0b 	bl	80039b4 <HAL_TIM_Base_Start_IT>
 800059e:	4603      	mov	r3, r0
 80005a0:	e000      	b.n	80005a4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3730      	adds	r7, #48	; 0x30
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40021000 	.word	0x40021000
 80005b0:	431bde83 	.word	0x431bde83
 80005b4:	2000008c 	.word	0x2000008c
 80005b8:	40012c00 	.word	0x40012c00

080005bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <NMI_Handler+0x4>

080005c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005c6:	e7fe      	b.n	80005c6 <HardFault_Handler+0x4>

080005c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <MemManage_Handler+0x4>

080005ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005d2:	e7fe      	b.n	80005d2 <BusFault_Handler+0x4>

080005d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <UsageFault_Handler+0x4>

080005da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005de:	bf00      	nop
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr

080005e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr

080005f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005fa:	bf00      	nop
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
	...

08000614 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000618:	4802      	ldr	r0, [pc, #8]	; (8000624 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800061a:	f003 fa3b 	bl	8003a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	2000008c 	.word	0x2000008c

08000628 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <SystemInit+0x5c>)
 800062e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000632:	4a14      	ldr	r2, [pc, #80]	; (8000684 <SystemInit+0x5c>)
 8000634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <SystemInit+0x60>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a11      	ldr	r2, [pc, #68]	; (8000688 <SystemInit+0x60>)
 8000642:	f043 0301 	orr.w	r3, r3, #1
 8000646:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <SystemInit+0x60>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <SystemInit+0x60>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <SystemInit+0x60>)
 8000654:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000658:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800065c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800065e:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <SystemInit+0x60>)
 8000660:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000664:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <SystemInit+0x60>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a07      	ldr	r2, [pc, #28]	; (8000688 <SystemInit+0x60>)
 800066c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000670:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <SystemInit+0x60>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000ed00 	.word	0xe000ed00
 8000688:	40021000 	.word	0x40021000

0800068c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800068c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000690:	f7ff ffca 	bl	8000628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000694:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000696:	e003      	b.n	80006a0 <LoopCopyDataInit>

08000698 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000698:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800069a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800069c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800069e:	3104      	adds	r1, #4

080006a0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80006a0:	480a      	ldr	r0, [pc, #40]	; (80006cc <LoopForever+0xa>)
	ldr	r3, =_edata
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80006a4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80006a6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80006a8:	d3f6      	bcc.n	8000698 <CopyDataInit>
	ldr	r2, =_sbss
 80006aa:	4a0a      	ldr	r2, [pc, #40]	; (80006d4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80006ac:	e002      	b.n	80006b4 <LoopFillZerobss>

080006ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80006ae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80006b0:	f842 3b04 	str.w	r3, [r2], #4

080006b4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <LoopForever+0x16>)
	cmp	r2, r3
 80006b6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80006b8:	d3f9      	bcc.n	80006ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ba:	f003 fbeb 	bl	8003e94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006be:	f7ff fd83 	bl	80001c8 <main>

080006c2 <LoopForever>:

LoopForever:
    b LoopForever
 80006c2:	e7fe      	b.n	80006c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006c4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80006c8:	08003f54 	.word	0x08003f54
	ldr	r0, =_sdata
 80006cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80006d0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80006d4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80006d8:	200000dc 	.word	0x200000dc

080006dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006dc:	e7fe      	b.n	80006dc <ADC1_2_IRQHandler>
	...

080006e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006e6:	2300      	movs	r3, #0
 80006e8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <HAL_Init+0x3c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a0b      	ldr	r2, [pc, #44]	; (800071c <HAL_Init+0x3c>)
 80006f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f6:	2003      	movs	r0, #3
 80006f8:	f001 fbf3 	bl	8001ee2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006fc:	200f      	movs	r0, #15
 80006fe:	f7ff ff07 	bl	8000510 <HAL_InitTick>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d002      	beq.n	800070e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000708:	2301      	movs	r3, #1
 800070a:	71fb      	strb	r3, [r7, #7]
 800070c:	e001      	b.n	8000712 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800070e:	f7ff fe71 	bl	80003f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000712:	79fb      	ldrb	r3, [r7, #7]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40022000 	.word	0x40022000

08000720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <HAL_IncTick+0x20>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	461a      	mov	r2, r3
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_IncTick+0x24>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4413      	add	r3, r2
 8000730:	4a04      	ldr	r2, [pc, #16]	; (8000744 <HAL_IncTick+0x24>)
 8000732:	6013      	str	r3, [r2, #0]
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	20000008 	.word	0x20000008
 8000744:	200000d8 	.word	0x200000d8

08000748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  return uwTick;
 800074c:	4b03      	ldr	r3, [pc, #12]	; (800075c <HAL_GetTick+0x14>)
 800074e:	681b      	ldr	r3, [r3, #0]
}
 8000750:	4618      	mov	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	200000d8 	.word	0x200000d8

08000760 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	431a      	orrs	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	609a      	str	r2, [r3, #8]
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
 800078e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	431a      	orrs	r2, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	609a      	str	r2, [r3, #8]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80007bc:	4618      	mov	r0, r3
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b087      	sub	sp, #28
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
 80007d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	3360      	adds	r3, #96	; 0x60
 80007da:	461a      	mov	r2, r3
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	4413      	add	r3, r2
 80007e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <LL_ADC_SetOffset+0x44>)
 80007ea:	4013      	ands	r3, r2
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80007f2:	683a      	ldr	r2, [r7, #0]
 80007f4:	430a      	orrs	r2, r1
 80007f6:	4313      	orrs	r3, r2
 80007f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000800:	bf00      	nop
 8000802:	371c      	adds	r7, #28
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	03fff000 	.word	0x03fff000

08000810 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	3360      	adds	r3, #96	; 0x60
 800081e:	461a      	mov	r2, r3
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	4413      	add	r3, r2
 8000826:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000830:	4618      	mov	r0, r3
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800083c:	b480      	push	{r7}
 800083e:	b087      	sub	sp, #28
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	3360      	adds	r3, #96	; 0x60
 800084c:	461a      	mov	r2, r3
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4413      	add	r3, r2
 8000854:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	431a      	orrs	r2, r3
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000866:	bf00      	nop
 8000868:	371c      	adds	r7, #28
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	68db      	ldr	r3, [r3, #12]
 800087e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000882:	2b00      	cmp	r3, #0
 8000884:	d101      	bne.n	800088a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000886:	2301      	movs	r3, #1
 8000888:	e000      	b.n	800088c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800088a:	2300      	movs	r3, #0
}
 800088c:	4618      	mov	r0, r3
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000898:	b480      	push	{r7}
 800089a:	b087      	sub	sp, #28
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	3330      	adds	r3, #48	; 0x30
 80008a8:	461a      	mov	r2, r3
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	0a1b      	lsrs	r3, r3, #8
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	f003 030c 	and.w	r3, r3, #12
 80008b4:	4413      	add	r3, r2
 80008b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	f003 031f 	and.w	r3, r3, #31
 80008c2:	211f      	movs	r1, #31
 80008c4:	fa01 f303 	lsl.w	r3, r1, r3
 80008c8:	43db      	mvns	r3, r3
 80008ca:	401a      	ands	r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	0e9b      	lsrs	r3, r3, #26
 80008d0:	f003 011f 	and.w	r1, r3, #31
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	f003 031f 	and.w	r3, r3, #31
 80008da:	fa01 f303 	lsl.w	r3, r1, r3
 80008de:	431a      	orrs	r2, r3
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80008e4:	bf00      	nop
 80008e6:	371c      	adds	r7, #28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b087      	sub	sp, #28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	3314      	adds	r3, #20
 8000900:	461a      	mov	r2, r3
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	0e5b      	lsrs	r3, r3, #25
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	f003 0304 	and.w	r3, r3, #4
 800090c:	4413      	add	r3, r2
 800090e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	0d1b      	lsrs	r3, r3, #20
 8000918:	f003 031f 	and.w	r3, r3, #31
 800091c:	2107      	movs	r1, #7
 800091e:	fa01 f303 	lsl.w	r3, r1, r3
 8000922:	43db      	mvns	r3, r3
 8000924:	401a      	ands	r2, r3
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	0d1b      	lsrs	r3, r3, #20
 800092a:	f003 031f 	and.w	r3, r3, #31
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	fa01 f303 	lsl.w	r3, r1, r3
 8000934:	431a      	orrs	r2, r3
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800093a:	bf00      	nop
 800093c:	371c      	adds	r7, #28
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
	...

08000948 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000960:	43db      	mvns	r3, r3
 8000962:	401a      	ands	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f003 0318 	and.w	r3, r3, #24
 800096a:	4908      	ldr	r1, [pc, #32]	; (800098c <LL_ADC_SetChannelSingleDiff+0x44>)
 800096c:	40d9      	lsrs	r1, r3
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	400b      	ands	r3, r1
 8000972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000976:	431a      	orrs	r2, r3
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800097e:	bf00      	nop
 8000980:	3714      	adds	r7, #20
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	0007ffff 	.word	0x0007ffff

08000990 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	f003 031f 	and.w	r3, r3, #31
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80009bc:	4618      	mov	r0, r3
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	689b      	ldr	r3, [r3, #8]
 80009d4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80009d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	6093      	str	r3, [r2, #8]
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80009fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a00:	d101      	bne.n	8000a06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000a02:	2301      	movs	r3, #1
 8000a04:	e000      	b.n	8000a08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000a06:	2300      	movs	r3, #0
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000a24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000a50:	d101      	bne.n	8000a56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000a52:	2301      	movs	r3, #1
 8000a54:	e000      	b.n	8000a58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000a56:	2300      	movs	r3, #0
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000a74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a78:	f043 0201 	orr.w	r2, r3, #1
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000a9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000aa0:	f043 0202 	orr.w	r2, r3, #2
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	f003 0301 	and.w	r3, r3, #1
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d101      	bne.n	8000acc <LL_ADC_IsEnabled+0x18>
 8000ac8:	2301      	movs	r3, #1
 8000aca:	e000      	b.n	8000ace <LL_ADC_IsEnabled+0x1a>
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b083      	sub	sp, #12
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	2b02      	cmp	r3, #2
 8000aec:	d101      	bne.n	8000af2 <LL_ADC_IsDisableOngoing+0x18>
 8000aee:	2301      	movs	r3, #1
 8000af0:	e000      	b.n	8000af4 <LL_ADC_IsDisableOngoing+0x1a>
 8000af2:	2300      	movs	r3, #0
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000b10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b14:	f043 0204 	orr.w	r2, r3, #4
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	f003 0304 	and.w	r3, r3, #4
 8000b38:	2b04      	cmp	r3, #4
 8000b3a:	d101      	bne.n	8000b40 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	e000      	b.n	8000b42 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	f003 0308 	and.w	r3, r3, #8
 8000b5e:	2b08      	cmp	r3, #8
 8000b60:	d101      	bne.n	8000b66 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000b62:	2301      	movs	r3, #1
 8000b64:	e000      	b.n	8000b68 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000b66:	2300      	movs	r3, #0
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b089      	sub	sp, #36	; 0x24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d101      	bne.n	8000b8e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e136      	b.n	8000dfc <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	691b      	ldr	r3, [r3, #16]
 8000b92:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d109      	bne.n	8000bb0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff fc4d 	bl	800043c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2200      	movs	r2, #0
 8000bac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff19 	bl	80009ec <LL_ADC_IsDeepPowerDownEnabled>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d004      	beq.n	8000bca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff feff 	bl	80009c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ff34 	bl	8000a3c <LL_ADC_IsInternalRegulatorEnabled>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d115      	bne.n	8000c06 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff ff18 	bl	8000a14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000be4:	4b87      	ldr	r3, [pc, #540]	; (8000e04 <HAL_ADC_Init+0x290>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	099b      	lsrs	r3, r3, #6
 8000bea:	4a87      	ldr	r2, [pc, #540]	; (8000e08 <HAL_ADC_Init+0x294>)
 8000bec:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf0:	099b      	lsrs	r3, r3, #6
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000bf8:	e002      	b.n	8000c00 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d1f9      	bne.n	8000bfa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ff16 	bl	8000a3c <LL_ADC_IsInternalRegulatorEnabled>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d10d      	bne.n	8000c32 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c1a:	f043 0210 	orr.w	r2, r3, #16
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c26:	f043 0201 	orr.w	r2, r3, #1
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff76 	bl	8000b28 <LL_ADC_REG_IsConversionOngoing>
 8000c3c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c42:	f003 0310 	and.w	r3, r3, #16
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f040 80cf 	bne.w	8000dea <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	f040 80cb 	bne.w	8000dea <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c58:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000c5c:	f043 0202 	orr.w	r2, r3, #2
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ff23 	bl	8000ab4 <LL_ADC_IsEnabled>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d115      	bne.n	8000ca0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000c74:	4865      	ldr	r0, [pc, #404]	; (8000e0c <HAL_ADC_Init+0x298>)
 8000c76:	f7ff ff1d 	bl	8000ab4 <LL_ADC_IsEnabled>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	4864      	ldr	r0, [pc, #400]	; (8000e10 <HAL_ADC_Init+0x29c>)
 8000c7e:	f7ff ff19 	bl	8000ab4 <LL_ADC_IsEnabled>
 8000c82:	4603      	mov	r3, r0
 8000c84:	431c      	orrs	r4, r3
 8000c86:	4863      	ldr	r0, [pc, #396]	; (8000e14 <HAL_ADC_Init+0x2a0>)
 8000c88:	f7ff ff14 	bl	8000ab4 <LL_ADC_IsEnabled>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	4323      	orrs	r3, r4
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d105      	bne.n	8000ca0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	485f      	ldr	r0, [pc, #380]	; (8000e18 <HAL_ADC_Init+0x2a4>)
 8000c9c:	f7ff fd60 	bl	8000760 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	7e5b      	ldrb	r3, [r3, #25]
 8000ca4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000caa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000cb0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000cb6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cbe:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d106      	bne.n	8000cdc <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	045b      	lsls	r3, r3, #17
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d009      	beq.n	8000cf8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	68da      	ldr	r2, [r3, #12]
 8000cfe:	4b47      	ldr	r3, [pc, #284]	; (8000e1c <HAL_ADC_Init+0x2a8>)
 8000d00:	4013      	ands	r3, r2
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	6812      	ldr	r2, [r2, #0]
 8000d06:	69b9      	ldr	r1, [r7, #24]
 8000d08:	430b      	orrs	r3, r1
 8000d0a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff09 	bl	8000b28 <LL_ADC_REG_IsConversionOngoing>
 8000d16:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff16 	bl	8000b4e <LL_ADC_INJ_IsConversionOngoing>
 8000d22:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d13d      	bne.n	8000da6 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d13a      	bne.n	8000da6 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000d34:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d3c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d4c:	f023 0302 	bic.w	r3, r3, #2
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	6812      	ldr	r2, [r2, #0]
 8000d54:	69b9      	ldr	r1, [r7, #24]
 8000d56:	430b      	orrs	r3, r1
 8000d58:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d118      	bne.n	8000d96 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	691b      	ldr	r3, [r3, #16]
 8000d6a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000d6e:	f023 0304 	bic.w	r3, r3, #4
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000d7a:	4311      	orrs	r1, r2
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000d80:	4311      	orrs	r1, r2
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000d86:	430a      	orrs	r2, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f042 0201 	orr.w	r2, r2, #1
 8000d92:	611a      	str	r2, [r3, #16]
 8000d94:	e007      	b.n	8000da6 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	691a      	ldr	r2, [r3, #16]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f022 0201 	bic.w	r2, r2, #1
 8000da4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	691b      	ldr	r3, [r3, #16]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d10c      	bne.n	8000dc8 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	f023 010f 	bic.w	r1, r3, #15
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	69db      	ldr	r3, [r3, #28]
 8000dbc:	1e5a      	subs	r2, r3, #1
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	631a      	str	r2, [r3, #48]	; 0x30
 8000dc6:	e007      	b.n	8000dd8 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f022 020f 	bic.w	r2, r2, #15
 8000dd6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ddc:	f023 0303 	bic.w	r3, r3, #3
 8000de0:	f043 0201 	orr.w	r2, r3, #1
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	655a      	str	r2, [r3, #84]	; 0x54
 8000de8:	e007      	b.n	8000dfa <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dee:	f043 0210 	orr.w	r2, r3, #16
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000dfa:	7ffb      	ldrb	r3, [r7, #31]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3724      	adds	r7, #36	; 0x24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd90      	pop	{r4, r7, pc}
 8000e04:	20000000 	.word	0x20000000
 8000e08:	053e2d63 	.word	0x053e2d63
 8000e0c:	50040000 	.word	0x50040000
 8000e10:	50040100 	.word	0x50040100
 8000e14:	50040200 	.word	0x50040200
 8000e18:	50040300 	.word	0x50040300
 8000e1c:	fff0c007 	.word	0xfff0c007

08000e20 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000e28:	4857      	ldr	r0, [pc, #348]	; (8000f88 <HAL_ADC_Start+0x168>)
 8000e2a:	f7ff fdb1 	bl	8000990 <LL_ADC_GetMultimode>
 8000e2e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fe77 	bl	8000b28 <LL_ADC_REG_IsConversionOngoing>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f040 809c 	bne.w	8000f7a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d101      	bne.n	8000e50 <HAL_ADC_Start+0x30>
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	e097      	b.n	8000f80 <HAL_ADC_Start+0x160>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2201      	movs	r2, #1
 8000e54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f000 fd71 	bl	8001940 <ADC_Enable>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e62:	7dfb      	ldrb	r3, [r7, #23]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f040 8083 	bne.w	8000f70 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e6e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e72:	f023 0301 	bic.w	r3, r3, #1
 8000e76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a42      	ldr	r2, [pc, #264]	; (8000f8c <HAL_ADC_Start+0x16c>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d002      	beq.n	8000e8e <HAL_ADC_Start+0x6e>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	e000      	b.n	8000e90 <HAL_ADC_Start+0x70>
 8000e8e:	4b40      	ldr	r3, [pc, #256]	; (8000f90 <HAL_ADC_Start+0x170>)
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	6812      	ldr	r2, [r2, #0]
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d002      	beq.n	8000e9e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d105      	bne.n	8000eaa <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ea2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000eae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000eb6:	d106      	bne.n	8000ec6 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ebc:	f023 0206 	bic.w	r2, r3, #6
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	659a      	str	r2, [r3, #88]	; 0x58
 8000ec4:	e002      	b.n	8000ecc <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	221c      	movs	r2, #28
 8000ed2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a2a      	ldr	r2, [pc, #168]	; (8000f8c <HAL_ADC_Start+0x16c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d002      	beq.n	8000eec <HAL_ADC_Start+0xcc>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	e000      	b.n	8000eee <HAL_ADC_Start+0xce>
 8000eec:	4b28      	ldr	r3, [pc, #160]	; (8000f90 <HAL_ADC_Start+0x170>)
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	6812      	ldr	r2, [r2, #0]
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d008      	beq.n	8000f08 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d005      	beq.n	8000f08 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	2b05      	cmp	r3, #5
 8000f00:	d002      	beq.n	8000f08 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	2b09      	cmp	r3, #9
 8000f06:	d114      	bne.n	8000f32 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d007      	beq.n	8000f26 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f1e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fde8 	bl	8000b00 <LL_ADC_REG_StartConversion>
 8000f30:	e025      	b.n	8000f7e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <HAL_ADC_Start+0x16c>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d002      	beq.n	8000f4e <HAL_ADC_Start+0x12e>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	e000      	b.n	8000f50 <HAL_ADC_Start+0x130>
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <HAL_ADC_Start+0x170>)
 8000f50:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d00f      	beq.n	8000f7e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	655a      	str	r2, [r3, #84]	; 0x54
 8000f6e:	e006      	b.n	8000f7e <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000f78:	e001      	b.n	8000f7e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8000f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	50040300 	.word	0x50040300
 8000f8c:	50040100 	.word	0x50040100
 8000f90:	50040000 	.word	0x50040000

08000f94 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000f9e:	4866      	ldr	r0, [pc, #408]	; (8001138 <HAL_ADC_PollForConversion+0x1a4>)
 8000fa0:	f7ff fcf6 	bl	8000990 <LL_ADC_GetMultimode>
 8000fa4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	2b08      	cmp	r3, #8
 8000fac:	d102      	bne.n	8000fb4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8000fae:	2308      	movs	r3, #8
 8000fb0:	61fb      	str	r3, [r7, #28]
 8000fb2:	e02a      	b.n	800100a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d005      	beq.n	8000fc6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	2b05      	cmp	r3, #5
 8000fbe:	d002      	beq.n	8000fc6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	2b09      	cmp	r3, #9
 8000fc4:	d111      	bne.n	8000fea <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d007      	beq.n	8000fe4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fd8:	f043 0220 	orr.w	r2, r3, #32
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e0a4      	b.n	800112e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8000fe8:	e00f      	b.n	800100a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8000fea:	4853      	ldr	r0, [pc, #332]	; (8001138 <HAL_ADC_PollForConversion+0x1a4>)
 8000fec:	f7ff fcde 	bl	80009ac <LL_ADC_GetMultiDMATransfer>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d007      	beq.n	8001006 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ffa:	f043 0220 	orr.w	r2, r3, #32
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e093      	b.n	800112e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001006:	2304      	movs	r3, #4
 8001008:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800100a:	f7ff fb9d 	bl	8000748 <HAL_GetTick>
 800100e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001010:	e021      	b.n	8001056 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001018:	d01d      	beq.n	8001056 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800101a:	f7ff fb95 	bl	8000748 <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	429a      	cmp	r2, r3
 8001028:	d302      	bcc.n	8001030 <HAL_ADC_PollForConversion+0x9c>
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d112      	bne.n	8001056 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	4013      	ands	r3, r2
 800103a:	2b00      	cmp	r3, #0
 800103c:	d10b      	bne.n	8001056 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001042:	f043 0204 	orr.w	r2, r3, #4
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e06b      	b.n	800112e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	4013      	ands	r3, r2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0d6      	beq.n	8001012 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001068:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fbfc 	bl	8000872 <LL_ADC_REG_IsTriggerSourceSWStart>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d01c      	beq.n	80010ba <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	7e5b      	ldrb	r3, [r3, #25]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d118      	bne.n	80010ba <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	2b08      	cmp	r3, #8
 8001094:	d111      	bne.n	80010ba <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800109a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d105      	bne.n	80010ba <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b2:	f043 0201 	orr.w	r2, r3, #1
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a1f      	ldr	r2, [pc, #124]	; (800113c <HAL_ADC_PollForConversion+0x1a8>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d002      	beq.n	80010ca <HAL_ADC_PollForConversion+0x136>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	e000      	b.n	80010cc <HAL_ADC_PollForConversion+0x138>
 80010ca:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <HAL_ADC_PollForConversion+0x1ac>)
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	6812      	ldr	r2, [r2, #0]
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d008      	beq.n	80010e6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d005      	beq.n	80010e6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	2b05      	cmp	r3, #5
 80010de:	d002      	beq.n	80010e6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	2b09      	cmp	r3, #9
 80010e4:	d104      	bne.n	80010f0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	61bb      	str	r3, [r7, #24]
 80010ee:	e00c      	b.n	800110a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a11      	ldr	r2, [pc, #68]	; (800113c <HAL_ADC_PollForConversion+0x1a8>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d002      	beq.n	8001100 <HAL_ADC_PollForConversion+0x16c>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	e000      	b.n	8001102 <HAL_ADC_PollForConversion+0x16e>
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <HAL_ADC_PollForConversion+0x1ac>)
 8001102:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	2b08      	cmp	r3, #8
 800110e:	d104      	bne.n	800111a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2208      	movs	r2, #8
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	e008      	b.n	800112c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d103      	bne.n	800112c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	220c      	movs	r2, #12
 800112a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3720      	adds	r7, #32
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	50040300 	.word	0x50040300
 800113c:	50040100 	.word	0x50040100
 8001140:	50040000 	.word	0x50040000

08001144 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b0b6      	sub	sp, #216	; 0xd8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800117a:	2b01      	cmp	r3, #1
 800117c:	d101      	bne.n	8001182 <HAL_ADC_ConfigChannel+0x22>
 800117e:	2302      	movs	r3, #2
 8001180:	e3c7      	b.n	8001912 <HAL_ADC_ConfigChannel+0x7b2>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2201      	movs	r2, #1
 8001186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fcca 	bl	8000b28 <LL_ADC_REG_IsConversionOngoing>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	f040 83a8 	bne.w	80018ec <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	2b05      	cmp	r3, #5
 80011a2:	d824      	bhi.n	80011ee <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	3b02      	subs	r3, #2
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d81b      	bhi.n	80011e6 <HAL_ADC_ConfigChannel+0x86>
 80011ae:	a201      	add	r2, pc, #4	; (adr r2, 80011b4 <HAL_ADC_ConfigChannel+0x54>)
 80011b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b4:	080011c5 	.word	0x080011c5
 80011b8:	080011cd 	.word	0x080011cd
 80011bc:	080011d5 	.word	0x080011d5
 80011c0:	080011dd 	.word	0x080011dd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	220c      	movs	r2, #12
 80011c8:	605a      	str	r2, [r3, #4]
          break;
 80011ca:	e011      	b.n	80011f0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	2212      	movs	r2, #18
 80011d0:	605a      	str	r2, [r3, #4]
          break;
 80011d2:	e00d      	b.n	80011f0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	2218      	movs	r2, #24
 80011d8:	605a      	str	r2, [r3, #4]
          break;
 80011da:	e009      	b.n	80011f0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011e2:	605a      	str	r2, [r3, #4]
          break;
 80011e4:	e004      	b.n	80011f0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	2206      	movs	r2, #6
 80011ea:	605a      	str	r2, [r3, #4]
          break;
 80011ec:	e000      	b.n	80011f0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80011ee:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6818      	ldr	r0, [r3, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	6859      	ldr	r1, [r3, #4]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	f7ff fb4b 	bl	8000898 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fc8e 	bl	8000b28 <LL_ADC_REG_IsConversionOngoing>
 800120c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fc9a 	bl	8000b4e <LL_ADC_INJ_IsConversionOngoing>
 800121a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800121e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001222:	2b00      	cmp	r3, #0
 8001224:	f040 81a6 	bne.w	8001574 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001228:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800122c:	2b00      	cmp	r3, #0
 800122e:	f040 81a1 	bne.w	8001574 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6818      	ldr	r0, [r3, #0]
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	6819      	ldr	r1, [r3, #0]
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	461a      	mov	r2, r3
 8001240:	f7ff fb56 	bl	80008f0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	695a      	ldr	r2, [r3, #20]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	08db      	lsrs	r3, r3, #3
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	2b04      	cmp	r3, #4
 8001264:	d00a      	beq.n	800127c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6818      	ldr	r0, [r3, #0]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	6919      	ldr	r1, [r3, #16]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001276:	f7ff faa7 	bl	80007c8 <LL_ADC_SetOffset>
 800127a:	e17b      	b.n	8001574 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fac4 	bl	8000810 <LL_ADC_GetOffsetChannel>
 8001288:	4603      	mov	r3, r0
 800128a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10a      	bne.n	80012a8 <HAL_ADC_ConfigChannel+0x148>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fab9 	bl	8000810 <LL_ADC_GetOffsetChannel>
 800129e:	4603      	mov	r3, r0
 80012a0:	0e9b      	lsrs	r3, r3, #26
 80012a2:	f003 021f 	and.w	r2, r3, #31
 80012a6:	e01e      	b.n	80012e6 <HAL_ADC_ConfigChannel+0x186>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff faae 	bl	8000810 <LL_ADC_GetOffsetChannel>
 80012b4:	4603      	mov	r3, r0
 80012b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80012be:	fa93 f3a3 	rbit	r3, r3
 80012c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80012ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80012ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80012d6:	2320      	movs	r3, #32
 80012d8:	e004      	b.n	80012e4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80012da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80012de:	fab3 f383 	clz	r3, r3
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d105      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x19e>
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	0e9b      	lsrs	r3, r3, #26
 80012f8:	f003 031f 	and.w	r3, r3, #31
 80012fc:	e018      	b.n	8001330 <HAL_ADC_ConfigChannel+0x1d0>
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001306:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800130a:	fa93 f3a3 	rbit	r3, r3
 800130e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001312:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001316:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800131a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001322:	2320      	movs	r3, #32
 8001324:	e004      	b.n	8001330 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001326:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800132a:	fab3 f383 	clz	r3, r3
 800132e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001330:	429a      	cmp	r2, r3
 8001332:	d106      	bne.n	8001342 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2200      	movs	r2, #0
 800133a:	2100      	movs	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fa7d 	bl	800083c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2101      	movs	r1, #1
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fa61 	bl	8000810 <LL_ADC_GetOffsetChannel>
 800134e:	4603      	mov	r3, r0
 8001350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001354:	2b00      	cmp	r3, #0
 8001356:	d10a      	bne.n	800136e <HAL_ADC_ConfigChannel+0x20e>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2101      	movs	r1, #1
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fa56 	bl	8000810 <LL_ADC_GetOffsetChannel>
 8001364:	4603      	mov	r3, r0
 8001366:	0e9b      	lsrs	r3, r3, #26
 8001368:	f003 021f 	and.w	r2, r3, #31
 800136c:	e01e      	b.n	80013ac <HAL_ADC_ConfigChannel+0x24c>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2101      	movs	r1, #1
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fa4b 	bl	8000810 <LL_ADC_GetOffsetChannel>
 800137a:	4603      	mov	r3, r0
 800137c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001380:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001384:	fa93 f3a3 	rbit	r3, r3
 8001388:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800138c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001390:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001394:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001398:	2b00      	cmp	r3, #0
 800139a:	d101      	bne.n	80013a0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800139c:	2320      	movs	r3, #32
 800139e:	e004      	b.n	80013aa <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80013a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80013a4:	fab3 f383 	clz	r3, r3
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d105      	bne.n	80013c4 <HAL_ADC_ConfigChannel+0x264>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	0e9b      	lsrs	r3, r3, #26
 80013be:	f003 031f 	and.w	r3, r3, #31
 80013c2:	e018      	b.n	80013f6 <HAL_ADC_ConfigChannel+0x296>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80013d0:	fa93 f3a3 	rbit	r3, r3
 80013d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80013d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80013dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80013e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80013e8:	2320      	movs	r3, #32
 80013ea:	e004      	b.n	80013f6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80013ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013f0:	fab3 f383 	clz	r3, r3
 80013f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d106      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2200      	movs	r2, #0
 8001400:	2101      	movs	r1, #1
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fa1a 	bl	800083c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2102      	movs	r1, #2
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f9fe 	bl	8000810 <LL_ADC_GetOffsetChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10a      	bne.n	8001434 <HAL_ADC_ConfigChannel+0x2d4>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2102      	movs	r1, #2
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f9f3 	bl	8000810 <LL_ADC_GetOffsetChannel>
 800142a:	4603      	mov	r3, r0
 800142c:	0e9b      	lsrs	r3, r3, #26
 800142e:	f003 021f 	and.w	r2, r3, #31
 8001432:	e01e      	b.n	8001472 <HAL_ADC_ConfigChannel+0x312>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2102      	movs	r1, #2
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff f9e8 	bl	8000810 <LL_ADC_GetOffsetChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001446:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800144a:	fa93 f3a3 	rbit	r3, r3
 800144e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001452:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001456:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800145a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001462:	2320      	movs	r3, #32
 8001464:	e004      	b.n	8001470 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001466:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800146a:	fab3 f383 	clz	r3, r3
 800146e:	b2db      	uxtb	r3, r3
 8001470:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800147a:	2b00      	cmp	r3, #0
 800147c:	d105      	bne.n	800148a <HAL_ADC_ConfigChannel+0x32a>
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	0e9b      	lsrs	r3, r3, #26
 8001484:	f003 031f 	and.w	r3, r3, #31
 8001488:	e016      	b.n	80014b8 <HAL_ADC_ConfigChannel+0x358>
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001492:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001496:	fa93 f3a3 	rbit	r3, r3
 800149a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800149c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800149e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80014a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80014aa:	2320      	movs	r3, #32
 80014ac:	e004      	b.n	80014b8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80014ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014b2:	fab3 f383 	clz	r3, r3
 80014b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d106      	bne.n	80014ca <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2200      	movs	r2, #0
 80014c2:	2102      	movs	r1, #2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff f9b9 	bl	800083c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2103      	movs	r1, #3
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff f99d 	bl	8000810 <LL_ADC_GetOffsetChannel>
 80014d6:	4603      	mov	r3, r0
 80014d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d10a      	bne.n	80014f6 <HAL_ADC_ConfigChannel+0x396>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2103      	movs	r1, #3
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f992 	bl	8000810 <LL_ADC_GetOffsetChannel>
 80014ec:	4603      	mov	r3, r0
 80014ee:	0e9b      	lsrs	r3, r3, #26
 80014f0:	f003 021f 	and.w	r2, r3, #31
 80014f4:	e017      	b.n	8001526 <HAL_ADC_ConfigChannel+0x3c6>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2103      	movs	r1, #3
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff f987 	bl	8000810 <LL_ADC_GetOffsetChannel>
 8001502:	4603      	mov	r3, r0
 8001504:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001508:	fa93 f3a3 	rbit	r3, r3
 800150c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800150e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001510:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001512:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001518:	2320      	movs	r3, #32
 800151a:	e003      	b.n	8001524 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800151c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800151e:	fab3 f383 	clz	r3, r3
 8001522:	b2db      	uxtb	r3, r3
 8001524:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800152e:	2b00      	cmp	r3, #0
 8001530:	d105      	bne.n	800153e <HAL_ADC_ConfigChannel+0x3de>
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	0e9b      	lsrs	r3, r3, #26
 8001538:	f003 031f 	and.w	r3, r3, #31
 800153c:	e011      	b.n	8001562 <HAL_ADC_ConfigChannel+0x402>
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001544:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001546:	fa93 f3a3 	rbit	r3, r3
 800154a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800154c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800154e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001556:	2320      	movs	r3, #32
 8001558:	e003      	b.n	8001562 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800155a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800155c:	fab3 f383 	clz	r3, r3
 8001560:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001562:	429a      	cmp	r2, r3
 8001564:	d106      	bne.n	8001574 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2200      	movs	r2, #0
 800156c:	2103      	movs	r1, #3
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff f964 	bl	800083c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fa9b 	bl	8000ab4 <LL_ADC_IsEnabled>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	f040 813f 	bne.w	8001804 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6818      	ldr	r0, [r3, #0]
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	6819      	ldr	r1, [r3, #0]
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	461a      	mov	r2, r3
 8001594:	f7ff f9d8 	bl	8000948 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	4a8e      	ldr	r2, [pc, #568]	; (80017d8 <HAL_ADC_ConfigChannel+0x678>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	f040 8130 	bne.w	8001804 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d10b      	bne.n	80015cc <HAL_ADC_ConfigChannel+0x46c>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	0e9b      	lsrs	r3, r3, #26
 80015ba:	3301      	adds	r3, #1
 80015bc:	f003 031f 	and.w	r3, r3, #31
 80015c0:	2b09      	cmp	r3, #9
 80015c2:	bf94      	ite	ls
 80015c4:	2301      	movls	r3, #1
 80015c6:	2300      	movhi	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	e019      	b.n	8001600 <HAL_ADC_ConfigChannel+0x4a0>
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015d4:	fa93 f3a3 	rbit	r3, r3
 80015d8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80015da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015dc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80015de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80015e4:	2320      	movs	r3, #32
 80015e6:	e003      	b.n	80015f0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80015e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015ea:	fab3 f383 	clz	r3, r3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	3301      	adds	r3, #1
 80015f2:	f003 031f 	and.w	r3, r3, #31
 80015f6:	2b09      	cmp	r3, #9
 80015f8:	bf94      	ite	ls
 80015fa:	2301      	movls	r3, #1
 80015fc:	2300      	movhi	r3, #0
 80015fe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001600:	2b00      	cmp	r3, #0
 8001602:	d079      	beq.n	80016f8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800160c:	2b00      	cmp	r3, #0
 800160e:	d107      	bne.n	8001620 <HAL_ADC_ConfigChannel+0x4c0>
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	0e9b      	lsrs	r3, r3, #26
 8001616:	3301      	adds	r3, #1
 8001618:	069b      	lsls	r3, r3, #26
 800161a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800161e:	e015      	b.n	800164c <HAL_ADC_ConfigChannel+0x4ec>
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001628:	fa93 f3a3 	rbit	r3, r3
 800162c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800162e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001630:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001638:	2320      	movs	r3, #32
 800163a:	e003      	b.n	8001644 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800163c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800163e:	fab3 f383 	clz	r3, r3
 8001642:	b2db      	uxtb	r3, r3
 8001644:	3301      	adds	r3, #1
 8001646:	069b      	lsls	r3, r3, #26
 8001648:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001654:	2b00      	cmp	r3, #0
 8001656:	d109      	bne.n	800166c <HAL_ADC_ConfigChannel+0x50c>
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	0e9b      	lsrs	r3, r3, #26
 800165e:	3301      	adds	r3, #1
 8001660:	f003 031f 	and.w	r3, r3, #31
 8001664:	2101      	movs	r1, #1
 8001666:	fa01 f303 	lsl.w	r3, r1, r3
 800166a:	e017      	b.n	800169c <HAL_ADC_ConfigChannel+0x53c>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001674:	fa93 f3a3 	rbit	r3, r3
 8001678:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800167a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800167c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800167e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001684:	2320      	movs	r3, #32
 8001686:	e003      	b.n	8001690 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800168a:	fab3 f383 	clz	r3, r3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	3301      	adds	r3, #1
 8001692:	f003 031f 	and.w	r3, r3, #31
 8001696:	2101      	movs	r1, #1
 8001698:	fa01 f303 	lsl.w	r3, r1, r3
 800169c:	ea42 0103 	orr.w	r1, r2, r3
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10a      	bne.n	80016c2 <HAL_ADC_ConfigChannel+0x562>
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	0e9b      	lsrs	r3, r3, #26
 80016b2:	3301      	adds	r3, #1
 80016b4:	f003 021f 	and.w	r2, r3, #31
 80016b8:	4613      	mov	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4413      	add	r3, r2
 80016be:	051b      	lsls	r3, r3, #20
 80016c0:	e018      	b.n	80016f4 <HAL_ADC_ConfigChannel+0x594>
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ca:	fa93 f3a3 	rbit	r3, r3
 80016ce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80016d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80016d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80016da:	2320      	movs	r3, #32
 80016dc:	e003      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80016de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016e0:	fab3 f383 	clz	r3, r3
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	3301      	adds	r3, #1
 80016e8:	f003 021f 	and.w	r2, r3, #31
 80016ec:	4613      	mov	r3, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4413      	add	r3, r2
 80016f2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016f4:	430b      	orrs	r3, r1
 80016f6:	e080      	b.n	80017fa <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001700:	2b00      	cmp	r3, #0
 8001702:	d107      	bne.n	8001714 <HAL_ADC_ConfigChannel+0x5b4>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	0e9b      	lsrs	r3, r3, #26
 800170a:	3301      	adds	r3, #1
 800170c:	069b      	lsls	r3, r3, #26
 800170e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001712:	e015      	b.n	8001740 <HAL_ADC_ConfigChannel+0x5e0>
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171c:	fa93 f3a3 	rbit	r3, r3
 8001720:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001724:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800172c:	2320      	movs	r3, #32
 800172e:	e003      	b.n	8001738 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001732:	fab3 f383 	clz	r3, r3
 8001736:	b2db      	uxtb	r3, r3
 8001738:	3301      	adds	r3, #1
 800173a:	069b      	lsls	r3, r3, #26
 800173c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001748:	2b00      	cmp	r3, #0
 800174a:	d109      	bne.n	8001760 <HAL_ADC_ConfigChannel+0x600>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	0e9b      	lsrs	r3, r3, #26
 8001752:	3301      	adds	r3, #1
 8001754:	f003 031f 	and.w	r3, r3, #31
 8001758:	2101      	movs	r1, #1
 800175a:	fa01 f303 	lsl.w	r3, r1, r3
 800175e:	e017      	b.n	8001790 <HAL_ADC_ConfigChannel+0x630>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	fa93 f3a3 	rbit	r3, r3
 800176c:	61fb      	str	r3, [r7, #28]
  return result;
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001778:	2320      	movs	r3, #32
 800177a:	e003      	b.n	8001784 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	fab3 f383 	clz	r3, r3
 8001782:	b2db      	uxtb	r3, r3
 8001784:	3301      	adds	r3, #1
 8001786:	f003 031f 	and.w	r3, r3, #31
 800178a:	2101      	movs	r1, #1
 800178c:	fa01 f303 	lsl.w	r3, r1, r3
 8001790:	ea42 0103 	orr.w	r1, r2, r3
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10d      	bne.n	80017bc <HAL_ADC_ConfigChannel+0x65c>
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	0e9b      	lsrs	r3, r3, #26
 80017a6:	3301      	adds	r3, #1
 80017a8:	f003 021f 	and.w	r2, r3, #31
 80017ac:	4613      	mov	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4413      	add	r3, r2
 80017b2:	3b1e      	subs	r3, #30
 80017b4:	051b      	lsls	r3, r3, #20
 80017b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017ba:	e01d      	b.n	80017f8 <HAL_ADC_ConfigChannel+0x698>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	fa93 f3a3 	rbit	r3, r3
 80017c8:	613b      	str	r3, [r7, #16]
  return result;
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d103      	bne.n	80017dc <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80017d4:	2320      	movs	r3, #32
 80017d6:	e005      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x684>
 80017d8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	fab3 f383 	clz	r3, r3
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	3301      	adds	r3, #1
 80017e6:	f003 021f 	and.w	r2, r3, #31
 80017ea:	4613      	mov	r3, r2
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	4413      	add	r3, r2
 80017f0:	3b1e      	subs	r3, #30
 80017f2:	051b      	lsls	r3, r3, #20
 80017f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017f8:	430b      	orrs	r3, r1
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	6892      	ldr	r2, [r2, #8]
 80017fe:	4619      	mov	r1, r3
 8001800:	f7ff f876 	bl	80008f0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4b44      	ldr	r3, [pc, #272]	; (800191c <HAL_ADC_ConfigChannel+0x7bc>)
 800180a:	4013      	ands	r3, r2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d07a      	beq.n	8001906 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001810:	4843      	ldr	r0, [pc, #268]	; (8001920 <HAL_ADC_ConfigChannel+0x7c0>)
 8001812:	f7fe ffcb 	bl	80007ac <LL_ADC_GetCommonPathInternalCh>
 8001816:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a41      	ldr	r2, [pc, #260]	; (8001924 <HAL_ADC_ConfigChannel+0x7c4>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d12c      	bne.n	800187e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001824:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001828:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d126      	bne.n	800187e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a3c      	ldr	r2, [pc, #240]	; (8001928 <HAL_ADC_ConfigChannel+0x7c8>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d004      	beq.n	8001844 <HAL_ADC_ConfigChannel+0x6e4>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a3b      	ldr	r2, [pc, #236]	; (800192c <HAL_ADC_ConfigChannel+0x7cc>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d15d      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001844:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001848:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800184c:	4619      	mov	r1, r3
 800184e:	4834      	ldr	r0, [pc, #208]	; (8001920 <HAL_ADC_ConfigChannel+0x7c0>)
 8001850:	f7fe ff99 	bl	8000786 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001854:	4b36      	ldr	r3, [pc, #216]	; (8001930 <HAL_ADC_ConfigChannel+0x7d0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	099b      	lsrs	r3, r3, #6
 800185a:	4a36      	ldr	r2, [pc, #216]	; (8001934 <HAL_ADC_ConfigChannel+0x7d4>)
 800185c:	fba2 2303 	umull	r2, r3, r2, r3
 8001860:	099b      	lsrs	r3, r3, #6
 8001862:	1c5a      	adds	r2, r3, #1
 8001864:	4613      	mov	r3, r2
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	4413      	add	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800186e:	e002      	b.n	8001876 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	3b01      	subs	r3, #1
 8001874:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f9      	bne.n	8001870 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800187c:	e040      	b.n	8001900 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a2d      	ldr	r2, [pc, #180]	; (8001938 <HAL_ADC_ConfigChannel+0x7d8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d118      	bne.n	80018ba <HAL_ADC_ConfigChannel+0x75a>
 8001888:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800188c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d112      	bne.n	80018ba <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a23      	ldr	r2, [pc, #140]	; (8001928 <HAL_ADC_ConfigChannel+0x7c8>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d004      	beq.n	80018a8 <HAL_ADC_ConfigChannel+0x748>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a22      	ldr	r2, [pc, #136]	; (800192c <HAL_ADC_ConfigChannel+0x7cc>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d12d      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018b0:	4619      	mov	r1, r3
 80018b2:	481b      	ldr	r0, [pc, #108]	; (8001920 <HAL_ADC_ConfigChannel+0x7c0>)
 80018b4:	f7fe ff67 	bl	8000786 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80018b8:	e024      	b.n	8001904 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a1f      	ldr	r2, [pc, #124]	; (800193c <HAL_ADC_ConfigChannel+0x7dc>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d120      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80018c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d11a      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a14      	ldr	r2, [pc, #80]	; (8001928 <HAL_ADC_ConfigChannel+0x7c8>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d115      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018e2:	4619      	mov	r1, r3
 80018e4:	480e      	ldr	r0, [pc, #56]	; (8001920 <HAL_ADC_ConfigChannel+0x7c0>)
 80018e6:	f7fe ff4e 	bl	8000786 <LL_ADC_SetCommonPathInternalCh>
 80018ea:	e00c      	b.n	8001906 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f0:	f043 0220 	orr.w	r2, r3, #32
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80018fe:	e002      	b.n	8001906 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001900:	bf00      	nop
 8001902:	e000      	b.n	8001906 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001904:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800190e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001912:	4618      	mov	r0, r3
 8001914:	37d8      	adds	r7, #216	; 0xd8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	80080000 	.word	0x80080000
 8001920:	50040300 	.word	0x50040300
 8001924:	c7520000 	.word	0xc7520000
 8001928:	50040000 	.word	0x50040000
 800192c:	50040200 	.word	0x50040200
 8001930:	20000000 	.word	0x20000000
 8001934:	053e2d63 	.word	0x053e2d63
 8001938:	cb840000 	.word	0xcb840000
 800193c:	80000001 	.word	0x80000001

08001940 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff f8b1 	bl	8000ab4 <LL_ADC_IsEnabled>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d14d      	bne.n	80019f4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	4b28      	ldr	r3, [pc, #160]	; (8001a00 <ADC_Enable+0xc0>)
 8001960:	4013      	ands	r3, r2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00d      	beq.n	8001982 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800196a:	f043 0210 	orr.w	r2, r3, #16
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001976:	f043 0201 	orr.w	r2, r3, #1
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e039      	b.n	80019f6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff f86c 	bl	8000a64 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800198c:	f7fe fedc 	bl	8000748 <HAL_GetTick>
 8001990:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001992:	e028      	b.n	80019e6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff f88b 	bl	8000ab4 <LL_ADC_IsEnabled>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d104      	bne.n	80019ae <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff f85b 	bl	8000a64 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019ae:	f7fe fecb 	bl	8000748 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d914      	bls.n	80019e6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d00d      	beq.n	80019e6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ce:	f043 0210 	orr.w	r2, r3, #16
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019da:	f043 0201 	orr.w	r2, r3, #1
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e007      	b.n	80019f6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d1cf      	bne.n	8001994 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	8000003f 	.word	0x8000003f

08001a04 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff f862 	bl	8000ada <LL_ADC_IsDisableOngoing>
 8001a16:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff f849 	bl	8000ab4 <LL_ADC_IsEnabled>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d047      	beq.n	8001ab8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d144      	bne.n	8001ab8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 030d 	and.w	r3, r3, #13
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d10c      	bne.n	8001a56 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff f823 	bl	8000a8c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a4e:	f7fe fe7b 	bl	8000748 <HAL_GetTick>
 8001a52:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001a54:	e029      	b.n	8001aaa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a5a:	f043 0210 	orr.w	r2, r3, #16
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a66:	f043 0201 	orr.w	r2, r3, #1
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e023      	b.n	8001aba <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a72:	f7fe fe69 	bl	8000748 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d914      	bls.n	8001aaa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00d      	beq.n	8001aaa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a92:	f043 0210 	orr.w	r2, r3, #16
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9e:	f043 0201 	orr.w	r2, r3, #1
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e007      	b.n	8001aba <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1dc      	bne.n	8001a72 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <LL_ADC_IsEnabled>:
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d101      	bne.n	8001ada <LL_ADC_IsEnabled+0x18>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <LL_ADC_IsEnabled+0x1a>
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_ADC_StartCalibration>:
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001afa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b04:	4313      	orrs	r3, r2
 8001b06:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <LL_ADC_IsCalibrationOnGoing>:
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b2e:	d101      	bne.n	8001b34 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <LL_ADC_REG_IsConversionOngoing>:
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d101      	bne.n	8001b5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <HAL_ADCEx_Calibration_Start+0x1c>
 8001b80:	2302      	movs	r3, #2
 8001b82:	e04d      	b.n	8001c20 <HAL_ADCEx_Calibration_Start+0xb8>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ff39 	bl	8001a04 <ADC_Disable>
 8001b92:	4603      	mov	r3, r0
 8001b94:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d136      	bne.n	8001c0a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ba4:	f023 0302 	bic.w	r3, r3, #2
 8001ba8:	f043 0202 	orr.w	r2, r3, #2
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6839      	ldr	r1, [r7, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff ff96 	bl	8001ae8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001bbc:	e014      	b.n	8001be8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8001bca:	d30d      	bcc.n	8001be8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd0:	f023 0312 	bic.w	r3, r3, #18
 8001bd4:	f043 0210 	orr.w	r2, r3, #16
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e01b      	b.n	8001c20 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff94 	bl	8001b1a <LL_ADC_IsCalibrationOnGoing>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1e2      	bne.n	8001bbe <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfc:	f023 0303 	bic.w	r3, r3, #3
 8001c00:	f043 0201 	orr.w	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	655a      	str	r2, [r3, #84]	; 0x54
 8001c08:	e005      	b.n	8001c16 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0e:	f043 0210 	orr.w	r2, r3, #16
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b09f      	sub	sp, #124	; 0x7c
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d101      	bne.n	8001c46 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e093      	b.n	8001d6e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001c4e:	2300      	movs	r3, #0
 8001c50:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001c52:	2300      	movs	r3, #0
 8001c54:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a47      	ldr	r2, [pc, #284]	; (8001d78 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d102      	bne.n	8001c66 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001c60:	4b46      	ldr	r3, [pc, #280]	; (8001d7c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	e001      	b.n	8001c6a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10b      	bne.n	8001c88 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c74:	f043 0220 	orr.w	r2, r3, #32
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e072      	b.n	8001d6e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff ff59 	bl	8001b42 <LL_ADC_REG_IsConversionOngoing>
 8001c90:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff ff53 	bl	8001b42 <LL_ADC_REG_IsConversionOngoing>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d154      	bne.n	8001d4c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001ca2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d151      	bne.n	8001d4c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001ca8:	4b35      	ldr	r3, [pc, #212]	; (8001d80 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001caa:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d02c      	beq.n	8001d0e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	6859      	ldr	r1, [r3, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cc6:	035b      	lsls	r3, r3, #13
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cd0:	4829      	ldr	r0, [pc, #164]	; (8001d78 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001cd2:	f7ff fef6 	bl	8001ac2 <LL_ADC_IsEnabled>
 8001cd6:	4604      	mov	r4, r0
 8001cd8:	4828      	ldr	r0, [pc, #160]	; (8001d7c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001cda:	f7ff fef2 	bl	8001ac2 <LL_ADC_IsEnabled>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	431c      	orrs	r4, r3
 8001ce2:	4828      	ldr	r0, [pc, #160]	; (8001d84 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001ce4:	f7ff feed 	bl	8001ac2 <LL_ADC_IsEnabled>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4323      	orrs	r3, r4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d137      	bne.n	8001d60 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001cf8:	f023 030f 	bic.w	r3, r3, #15
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	6811      	ldr	r1, [r2, #0]
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	6892      	ldr	r2, [r2, #8]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	431a      	orrs	r2, r3
 8001d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d0a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d0c:	e028      	b.n	8001d60 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d18:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d1a:	4817      	ldr	r0, [pc, #92]	; (8001d78 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001d1c:	f7ff fed1 	bl	8001ac2 <LL_ADC_IsEnabled>
 8001d20:	4604      	mov	r4, r0
 8001d22:	4816      	ldr	r0, [pc, #88]	; (8001d7c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001d24:	f7ff fecd 	bl	8001ac2 <LL_ADC_IsEnabled>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	431c      	orrs	r4, r3
 8001d2c:	4815      	ldr	r0, [pc, #84]	; (8001d84 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001d2e:	f7ff fec8 	bl	8001ac2 <LL_ADC_IsEnabled>
 8001d32:	4603      	mov	r3, r0
 8001d34:	4323      	orrs	r3, r4
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d112      	bne.n	8001d60 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d42:	f023 030f 	bic.w	r3, r3, #15
 8001d46:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001d48:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d4a:	e009      	b.n	8001d60 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d50:	f043 0220 	orr.w	r2, r3, #32
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001d5e:	e000      	b.n	8001d62 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d60:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d6a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	377c      	adds	r7, #124	; 0x7c
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd90      	pop	{r4, r7, pc}
 8001d76:	bf00      	nop
 8001d78:	50040000 	.word	0x50040000
 8001d7c:	50040100 	.word	0x50040100
 8001d80:	50040300 	.word	0x50040300
 8001d84:	50040200 	.word	0x50040200

08001d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d98:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <__NVIC_SetPriorityGrouping+0x44>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001da4:	4013      	ands	r3, r2
 8001da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dba:	4a04      	ldr	r2, [pc, #16]	; (8001dcc <__NVIC_SetPriorityGrouping+0x44>)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	60d3      	str	r3, [r2, #12]
}
 8001dc0:	bf00      	nop
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd4:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	0a1b      	lsrs	r3, r3, #8
 8001dda:	f003 0307 	and.w	r3, r3, #7
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	db0b      	blt.n	8001e16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	f003 021f 	and.w	r2, r3, #31
 8001e04:	4907      	ldr	r1, [pc, #28]	; (8001e24 <__NVIC_EnableIRQ+0x38>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	095b      	lsrs	r3, r3, #5
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	e000e100 	.word	0xe000e100

08001e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	6039      	str	r1, [r7, #0]
 8001e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	db0a      	blt.n	8001e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	490c      	ldr	r1, [pc, #48]	; (8001e74 <__NVIC_SetPriority+0x4c>)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	0112      	lsls	r2, r2, #4
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	440b      	add	r3, r1
 8001e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e50:	e00a      	b.n	8001e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	4908      	ldr	r1, [pc, #32]	; (8001e78 <__NVIC_SetPriority+0x50>)
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	3b04      	subs	r3, #4
 8001e60:	0112      	lsls	r2, r2, #4
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	440b      	add	r3, r1
 8001e66:	761a      	strb	r2, [r3, #24]
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	e000e100 	.word	0xe000e100
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b089      	sub	sp, #36	; 0x24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f1c3 0307 	rsb	r3, r3, #7
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	bf28      	it	cs
 8001e9a:	2304      	movcs	r3, #4
 8001e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	2b06      	cmp	r3, #6
 8001ea4:	d902      	bls.n	8001eac <NVIC_EncodePriority+0x30>
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3b03      	subs	r3, #3
 8001eaa:	e000      	b.n	8001eae <NVIC_EncodePriority+0x32>
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43da      	mvns	r2, r3
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	401a      	ands	r2, r3
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ece:	43d9      	mvns	r1, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed4:	4313      	orrs	r3, r2
         );
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3724      	adds	r7, #36	; 0x24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff ff4c 	bl	8001d88 <__NVIC_SetPriorityGrouping>
}
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
 8001f04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f0a:	f7ff ff61 	bl	8001dd0 <__NVIC_GetPriorityGrouping>
 8001f0e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	68b9      	ldr	r1, [r7, #8]
 8001f14:	6978      	ldr	r0, [r7, #20]
 8001f16:	f7ff ffb1 	bl	8001e7c <NVIC_EncodePriority>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff ff80 	bl	8001e28 <__NVIC_SetPriority>
}
 8001f28:	bf00      	nop
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff ff54 	bl	8001dec <__NVIC_EnableIRQ>
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b087      	sub	sp, #28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f5a:	e17f      	b.n	800225c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	2101      	movs	r1, #1
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	fa01 f303 	lsl.w	r3, r1, r3
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 8171 	beq.w	8002256 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d00b      	beq.n	8001f94 <HAL_GPIO_Init+0x48>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d007      	beq.n	8001f94 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f88:	2b11      	cmp	r3, #17
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b12      	cmp	r3, #18
 8001f92:	d130      	bne.n	8001ff6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fca:	2201      	movs	r2, #1
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	091b      	lsrs	r3, r3, #4
 8001fe0:	f003 0201 	and.w	r2, r3, #1
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d118      	bne.n	8002034 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002006:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002008:	2201      	movs	r2, #1
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4013      	ands	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	08db      	lsrs	r3, r3, #3
 800201e:	f003 0201 	and.w	r2, r3, #1
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4313      	orrs	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	2203      	movs	r2, #3
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4013      	ands	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4313      	orrs	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b02      	cmp	r3, #2
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_Init+0x128>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b12      	cmp	r3, #18
 8002072:	d123      	bne.n	80020bc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	08da      	lsrs	r2, r3, #3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3208      	adds	r2, #8
 800207c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002080:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	220f      	movs	r2, #15
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4013      	ands	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	691a      	ldr	r2, [r3, #16]
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	08da      	lsrs	r2, r3, #3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3208      	adds	r2, #8
 80020b6:	6939      	ldr	r1, [r7, #16]
 80020b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	2203      	movs	r2, #3
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4013      	ands	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0203 	and.w	r2, r3, #3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 80ac 	beq.w	8002256 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020fe:	4b5f      	ldr	r3, [pc, #380]	; (800227c <HAL_GPIO_Init+0x330>)
 8002100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002102:	4a5e      	ldr	r2, [pc, #376]	; (800227c <HAL_GPIO_Init+0x330>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6613      	str	r3, [r2, #96]	; 0x60
 800210a:	4b5c      	ldr	r3, [pc, #368]	; (800227c <HAL_GPIO_Init+0x330>)
 800210c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002116:	4a5a      	ldr	r2, [pc, #360]	; (8002280 <HAL_GPIO_Init+0x334>)
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	089b      	lsrs	r3, r3, #2
 800211c:	3302      	adds	r3, #2
 800211e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002122:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	220f      	movs	r2, #15
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4013      	ands	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002140:	d025      	beq.n	800218e <HAL_GPIO_Init+0x242>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a4f      	ldr	r2, [pc, #316]	; (8002284 <HAL_GPIO_Init+0x338>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d01f      	beq.n	800218a <HAL_GPIO_Init+0x23e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a4e      	ldr	r2, [pc, #312]	; (8002288 <HAL_GPIO_Init+0x33c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d019      	beq.n	8002186 <HAL_GPIO_Init+0x23a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a4d      	ldr	r2, [pc, #308]	; (800228c <HAL_GPIO_Init+0x340>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d013      	beq.n	8002182 <HAL_GPIO_Init+0x236>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a4c      	ldr	r2, [pc, #304]	; (8002290 <HAL_GPIO_Init+0x344>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d00d      	beq.n	800217e <HAL_GPIO_Init+0x232>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a4b      	ldr	r2, [pc, #300]	; (8002294 <HAL_GPIO_Init+0x348>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d007      	beq.n	800217a <HAL_GPIO_Init+0x22e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a4a      	ldr	r2, [pc, #296]	; (8002298 <HAL_GPIO_Init+0x34c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d101      	bne.n	8002176 <HAL_GPIO_Init+0x22a>
 8002172:	2306      	movs	r3, #6
 8002174:	e00c      	b.n	8002190 <HAL_GPIO_Init+0x244>
 8002176:	2307      	movs	r3, #7
 8002178:	e00a      	b.n	8002190 <HAL_GPIO_Init+0x244>
 800217a:	2305      	movs	r3, #5
 800217c:	e008      	b.n	8002190 <HAL_GPIO_Init+0x244>
 800217e:	2304      	movs	r3, #4
 8002180:	e006      	b.n	8002190 <HAL_GPIO_Init+0x244>
 8002182:	2303      	movs	r3, #3
 8002184:	e004      	b.n	8002190 <HAL_GPIO_Init+0x244>
 8002186:	2302      	movs	r3, #2
 8002188:	e002      	b.n	8002190 <HAL_GPIO_Init+0x244>
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <HAL_GPIO_Init+0x244>
 800218e:	2300      	movs	r3, #0
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	f002 0203 	and.w	r2, r2, #3
 8002196:	0092      	lsls	r2, r2, #2
 8002198:	4093      	lsls	r3, r2
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021a0:	4937      	ldr	r1, [pc, #220]	; (8002280 <HAL_GPIO_Init+0x334>)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	089b      	lsrs	r3, r3, #2
 80021a6:	3302      	adds	r3, #2
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80021ae:	4b3b      	ldr	r3, [pc, #236]	; (800229c <HAL_GPIO_Init+0x350>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	43db      	mvns	r3, r3
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	4013      	ands	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021d2:	4a32      	ldr	r2, [pc, #200]	; (800229c <HAL_GPIO_Init+0x350>)
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80021d8:	4b30      	ldr	r3, [pc, #192]	; (800229c <HAL_GPIO_Init+0x350>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	43db      	mvns	r3, r3
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	4013      	ands	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021fc:	4a27      	ldr	r2, [pc, #156]	; (800229c <HAL_GPIO_Init+0x350>)
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002202:	4b26      	ldr	r3, [pc, #152]	; (800229c <HAL_GPIO_Init+0x350>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	43db      	mvns	r3, r3
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4013      	ands	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4313      	orrs	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002226:	4a1d      	ldr	r2, [pc, #116]	; (800229c <HAL_GPIO_Init+0x350>)
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800222c:	4b1b      	ldr	r3, [pc, #108]	; (800229c <HAL_GPIO_Init+0x350>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	43db      	mvns	r3, r3
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	4013      	ands	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4313      	orrs	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002250:	4a12      	ldr	r2, [pc, #72]	; (800229c <HAL_GPIO_Init+0x350>)
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	3301      	adds	r3, #1
 800225a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	fa22 f303 	lsr.w	r3, r2, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	f47f ae78 	bne.w	8001f5c <HAL_GPIO_Init+0x10>
  }
}
 800226c:	bf00      	nop
 800226e:	bf00      	nop
 8002270:	371c      	adds	r7, #28
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40021000 	.word	0x40021000
 8002280:	40010000 	.word	0x40010000
 8002284:	48000400 	.word	0x48000400
 8002288:	48000800 	.word	0x48000800
 800228c:	48000c00 	.word	0x48000c00
 8002290:	48001000 	.word	0x48001000
 8002294:	48001400 	.word	0x48001400
 8002298:	48001800 	.word	0x48001800
 800229c:	40010400 	.word	0x40010400

080022a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80022a4:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	40007000 	.word	0x40007000

080022bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ca:	d130      	bne.n	800232e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022cc:	4b23      	ldr	r3, [pc, #140]	; (800235c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022d8:	d038      	beq.n	800234c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022da:	4b20      	ldr	r3, [pc, #128]	; (800235c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022e2:	4a1e      	ldr	r2, [pc, #120]	; (800235c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022ea:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2232      	movs	r2, #50	; 0x32
 80022f0:	fb02 f303 	mul.w	r3, r2, r3
 80022f4:	4a1b      	ldr	r2, [pc, #108]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	0c9b      	lsrs	r3, r3, #18
 80022fc:	3301      	adds	r3, #1
 80022fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002300:	e002      	b.n	8002308 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	3b01      	subs	r3, #1
 8002306:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002308:	4b14      	ldr	r3, [pc, #80]	; (800235c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002314:	d102      	bne.n	800231c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f2      	bne.n	8002302 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800231c:	4b0f      	ldr	r3, [pc, #60]	; (800235c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002328:	d110      	bne.n	800234c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e00f      	b.n	800234e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800232e:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800233a:	d007      	beq.n	800234c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800233c:	4b07      	ldr	r3, [pc, #28]	; (800235c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002344:	4a05      	ldr	r2, [pc, #20]	; (800235c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002346:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800234a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40007000 	.word	0x40007000
 8002360:	20000000 	.word	0x20000000
 8002364:	431bde83 	.word	0x431bde83

08002368 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e3d4      	b.n	8002b24 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800237a:	4ba1      	ldr	r3, [pc, #644]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002384:	4b9e      	ldr	r3, [pc, #632]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0310 	and.w	r3, r3, #16
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 80e4 	beq.w	8002564 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d007      	beq.n	80023b2 <HAL_RCC_OscConfig+0x4a>
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	2b0c      	cmp	r3, #12
 80023a6:	f040 808b 	bne.w	80024c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	f040 8087 	bne.w	80024c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023b2:	4b93      	ldr	r3, [pc, #588]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <HAL_RCC_OscConfig+0x62>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e3ac      	b.n	8002b24 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a1a      	ldr	r2, [r3, #32]
 80023ce:	4b8c      	ldr	r3, [pc, #560]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d004      	beq.n	80023e4 <HAL_RCC_OscConfig+0x7c>
 80023da:	4b89      	ldr	r3, [pc, #548]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023e2:	e005      	b.n	80023f0 <HAL_RCC_OscConfig+0x88>
 80023e4:	4b86      	ldr	r3, [pc, #536]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 80023e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ea:	091b      	lsrs	r3, r3, #4
 80023ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d223      	bcs.n	800243c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 fd5d 	bl	8002eb8 <RCC_SetFlashLatencyFromMSIRange>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e38d      	b.n	8002b24 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002408:	4b7d      	ldr	r3, [pc, #500]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a7c      	ldr	r2, [pc, #496]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 800240e:	f043 0308 	orr.w	r3, r3, #8
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	4b7a      	ldr	r3, [pc, #488]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	4977      	ldr	r1, [pc, #476]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002426:	4b76      	ldr	r3, [pc, #472]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	021b      	lsls	r3, r3, #8
 8002434:	4972      	ldr	r1, [pc, #456]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 8002436:	4313      	orrs	r3, r2
 8002438:	604b      	str	r3, [r1, #4]
 800243a:	e025      	b.n	8002488 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800243c:	4b70      	ldr	r3, [pc, #448]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a6f      	ldr	r2, [pc, #444]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 8002442:	f043 0308 	orr.w	r3, r3, #8
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	4b6d      	ldr	r3, [pc, #436]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	496a      	ldr	r1, [pc, #424]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 8002456:	4313      	orrs	r3, r2
 8002458:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800245a:	4b69      	ldr	r3, [pc, #420]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	021b      	lsls	r3, r3, #8
 8002468:	4965      	ldr	r1, [pc, #404]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 800246a:	4313      	orrs	r3, r2
 800246c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d109      	bne.n	8002488 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	4618      	mov	r0, r3
 800247a:	f000 fd1d 	bl	8002eb8 <RCC_SetFlashLatencyFromMSIRange>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e34d      	b.n	8002b24 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002488:	f000 fc36 	bl	8002cf8 <HAL_RCC_GetSysClockFreq>
 800248c:	4602      	mov	r2, r0
 800248e:	4b5c      	ldr	r3, [pc, #368]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	091b      	lsrs	r3, r3, #4
 8002494:	f003 030f 	and.w	r3, r3, #15
 8002498:	495a      	ldr	r1, [pc, #360]	; (8002604 <HAL_RCC_OscConfig+0x29c>)
 800249a:	5ccb      	ldrb	r3, [r1, r3]
 800249c:	f003 031f 	and.w	r3, r3, #31
 80024a0:	fa22 f303 	lsr.w	r3, r2, r3
 80024a4:	4a58      	ldr	r2, [pc, #352]	; (8002608 <HAL_RCC_OscConfig+0x2a0>)
 80024a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024a8:	4b58      	ldr	r3, [pc, #352]	; (800260c <HAL_RCC_OscConfig+0x2a4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fe f82f 	bl	8000510 <HAL_InitTick>
 80024b2:	4603      	mov	r3, r0
 80024b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d052      	beq.n	8002562 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	e331      	b.n	8002b24 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d032      	beq.n	800252e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024c8:	4b4d      	ldr	r3, [pc, #308]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a4c      	ldr	r2, [pc, #304]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024d4:	f7fe f938 	bl	8000748 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024dc:	f7fe f934 	bl	8000748 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e31a      	b.n	8002b24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024ee:	4b44      	ldr	r3, [pc, #272]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024fa:	4b41      	ldr	r3, [pc, #260]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a40      	ldr	r2, [pc, #256]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 8002500:	f043 0308 	orr.w	r3, r3, #8
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	4b3e      	ldr	r3, [pc, #248]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	493b      	ldr	r1, [pc, #236]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 8002514:	4313      	orrs	r3, r2
 8002516:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002518:	4b39      	ldr	r3, [pc, #228]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	021b      	lsls	r3, r3, #8
 8002526:	4936      	ldr	r1, [pc, #216]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 8002528:	4313      	orrs	r3, r2
 800252a:	604b      	str	r3, [r1, #4]
 800252c:	e01a      	b.n	8002564 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800252e:	4b34      	ldr	r3, [pc, #208]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a33      	ldr	r2, [pc, #204]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 8002534:	f023 0301 	bic.w	r3, r3, #1
 8002538:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800253a:	f7fe f905 	bl	8000748 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002542:	f7fe f901 	bl	8000748 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e2e7      	b.n	8002b24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002554:	4b2a      	ldr	r3, [pc, #168]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1f0      	bne.n	8002542 <HAL_RCC_OscConfig+0x1da>
 8002560:	e000      	b.n	8002564 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002562:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d074      	beq.n	800265a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	2b08      	cmp	r3, #8
 8002574:	d005      	beq.n	8002582 <HAL_RCC_OscConfig+0x21a>
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	2b0c      	cmp	r3, #12
 800257a:	d10e      	bne.n	800259a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	2b03      	cmp	r3, #3
 8002580:	d10b      	bne.n	800259a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002582:	4b1f      	ldr	r3, [pc, #124]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d064      	beq.n	8002658 <HAL_RCC_OscConfig+0x2f0>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d160      	bne.n	8002658 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e2c4      	b.n	8002b24 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a2:	d106      	bne.n	80025b2 <HAL_RCC_OscConfig+0x24a>
 80025a4:	4b16      	ldr	r3, [pc, #88]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a15      	ldr	r2, [pc, #84]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 80025aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	e01d      	b.n	80025ee <HAL_RCC_OscConfig+0x286>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025ba:	d10c      	bne.n	80025d6 <HAL_RCC_OscConfig+0x26e>
 80025bc:	4b10      	ldr	r3, [pc, #64]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a0f      	ldr	r2, [pc, #60]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 80025c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	4b0d      	ldr	r3, [pc, #52]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a0c      	ldr	r2, [pc, #48]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 80025ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	e00b      	b.n	80025ee <HAL_RCC_OscConfig+0x286>
 80025d6:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a09      	ldr	r2, [pc, #36]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 80025dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	4b07      	ldr	r3, [pc, #28]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a06      	ldr	r2, [pc, #24]	; (8002600 <HAL_RCC_OscConfig+0x298>)
 80025e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d01c      	beq.n	8002630 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f6:	f7fe f8a7 	bl	8000748 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025fc:	e011      	b.n	8002622 <HAL_RCC_OscConfig+0x2ba>
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000
 8002604:	08003f04 	.word	0x08003f04
 8002608:	20000000 	.word	0x20000000
 800260c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002610:	f7fe f89a 	bl	8000748 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b64      	cmp	r3, #100	; 0x64
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e280      	b.n	8002b24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002622:	4baf      	ldr	r3, [pc, #700]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f0      	beq.n	8002610 <HAL_RCC_OscConfig+0x2a8>
 800262e:	e014      	b.n	800265a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002630:	f7fe f88a 	bl	8000748 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002638:	f7fe f886 	bl	8000748 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b64      	cmp	r3, #100	; 0x64
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e26c      	b.n	8002b24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800264a:	4ba5      	ldr	r3, [pc, #660]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x2d0>
 8002656:	e000      	b.n	800265a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d060      	beq.n	8002728 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	2b04      	cmp	r3, #4
 800266a:	d005      	beq.n	8002678 <HAL_RCC_OscConfig+0x310>
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	2b0c      	cmp	r3, #12
 8002670:	d119      	bne.n	80026a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d116      	bne.n	80026a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002678:	4b99      	ldr	r3, [pc, #612]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d005      	beq.n	8002690 <HAL_RCC_OscConfig+0x328>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e249      	b.n	8002b24 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002690:	4b93      	ldr	r3, [pc, #588]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	061b      	lsls	r3, r3, #24
 800269e:	4990      	ldr	r1, [pc, #576]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026a4:	e040      	b.n	8002728 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d023      	beq.n	80026f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ae:	4b8c      	ldr	r3, [pc, #560]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a8b      	ldr	r2, [pc, #556]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 80026b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ba:	f7fe f845 	bl	8000748 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c2:	f7fe f841 	bl	8000748 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e227      	b.n	8002b24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026d4:	4b82      	ldr	r3, [pc, #520]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f0      	beq.n	80026c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e0:	4b7f      	ldr	r3, [pc, #508]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	061b      	lsls	r3, r3, #24
 80026ee:	497c      	ldr	r1, [pc, #496]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	604b      	str	r3, [r1, #4]
 80026f4:	e018      	b.n	8002728 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026f6:	4b7a      	ldr	r3, [pc, #488]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a79      	ldr	r2, [pc, #484]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 80026fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002702:	f7fe f821 	bl	8000748 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800270a:	f7fe f81d 	bl	8000748 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e203      	b.n	8002b24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800271c:	4b70      	ldr	r3, [pc, #448]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f0      	bne.n	800270a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	2b00      	cmp	r3, #0
 8002732:	d03c      	beq.n	80027ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d01c      	beq.n	8002776 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800273c:	4b68      	ldr	r3, [pc, #416]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 800273e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002742:	4a67      	ldr	r2, [pc, #412]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274c:	f7fd fffc 	bl	8000748 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002754:	f7fd fff8 	bl	8000748 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e1de      	b.n	8002b24 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002766:	4b5e      	ldr	r3, [pc, #376]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 8002768:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0ef      	beq.n	8002754 <HAL_RCC_OscConfig+0x3ec>
 8002774:	e01b      	b.n	80027ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002776:	4b5a      	ldr	r3, [pc, #360]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 8002778:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800277c:	4a58      	ldr	r2, [pc, #352]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 800277e:	f023 0301 	bic.w	r3, r3, #1
 8002782:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002786:	f7fd ffdf 	bl	8000748 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800278e:	f7fd ffdb 	bl	8000748 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e1c1      	b.n	8002b24 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027a0:	4b4f      	ldr	r3, [pc, #316]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 80027a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1ef      	bne.n	800278e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 80a6 	beq.w	8002908 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027bc:	2300      	movs	r3, #0
 80027be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027c0:	4b47      	ldr	r3, [pc, #284]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 80027c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10d      	bne.n	80027e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027cc:	4b44      	ldr	r3, [pc, #272]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 80027ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d0:	4a43      	ldr	r2, [pc, #268]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 80027d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d6:	6593      	str	r3, [r2, #88]	; 0x58
 80027d8:	4b41      	ldr	r3, [pc, #260]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 80027da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e4:	2301      	movs	r3, #1
 80027e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027e8:	4b3e      	ldr	r3, [pc, #248]	; (80028e4 <HAL_RCC_OscConfig+0x57c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d118      	bne.n	8002826 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027f4:	4b3b      	ldr	r3, [pc, #236]	; (80028e4 <HAL_RCC_OscConfig+0x57c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a3a      	ldr	r2, [pc, #232]	; (80028e4 <HAL_RCC_OscConfig+0x57c>)
 80027fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002800:	f7fd ffa2 	bl	8000748 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002808:	f7fd ff9e 	bl	8000748 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e184      	b.n	8002b24 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800281a:	4b32      	ldr	r3, [pc, #200]	; (80028e4 <HAL_RCC_OscConfig+0x57c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d108      	bne.n	8002840 <HAL_RCC_OscConfig+0x4d8>
 800282e:	4b2c      	ldr	r3, [pc, #176]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 8002830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002834:	4a2a      	ldr	r2, [pc, #168]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800283e:	e024      	b.n	800288a <HAL_RCC_OscConfig+0x522>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	2b05      	cmp	r3, #5
 8002846:	d110      	bne.n	800286a <HAL_RCC_OscConfig+0x502>
 8002848:	4b25      	ldr	r3, [pc, #148]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284e:	4a24      	ldr	r2, [pc, #144]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 8002850:	f043 0304 	orr.w	r3, r3, #4
 8002854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002858:	4b21      	ldr	r3, [pc, #132]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 800285a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285e:	4a20      	ldr	r2, [pc, #128]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002868:	e00f      	b.n	800288a <HAL_RCC_OscConfig+0x522>
 800286a:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 800286c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002870:	4a1b      	ldr	r2, [pc, #108]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 8002872:	f023 0301 	bic.w	r3, r3, #1
 8002876:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800287a:	4b19      	ldr	r3, [pc, #100]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 800287c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002880:	4a17      	ldr	r2, [pc, #92]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 8002882:	f023 0304 	bic.w	r3, r3, #4
 8002886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d016      	beq.n	80028c0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002892:	f7fd ff59 	bl	8000748 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002898:	e00a      	b.n	80028b0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289a:	f7fd ff55 	bl	8000748 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e139      	b.n	8002b24 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <HAL_RCC_OscConfig+0x578>)
 80028b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0ed      	beq.n	800289a <HAL_RCC_OscConfig+0x532>
 80028be:	e01a      	b.n	80028f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c0:	f7fd ff42 	bl	8000748 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028c6:	e00f      	b.n	80028e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c8:	f7fd ff3e 	bl	8000748 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d906      	bls.n	80028e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e122      	b.n	8002b24 <HAL_RCC_OscConfig+0x7bc>
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028e8:	4b90      	ldr	r3, [pc, #576]	; (8002b2c <HAL_RCC_OscConfig+0x7c4>)
 80028ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1e8      	bne.n	80028c8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028f6:	7ffb      	ldrb	r3, [r7, #31]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d105      	bne.n	8002908 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028fc:	4b8b      	ldr	r3, [pc, #556]	; (8002b2c <HAL_RCC_OscConfig+0x7c4>)
 80028fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002900:	4a8a      	ldr	r2, [pc, #552]	; (8002b2c <HAL_RCC_OscConfig+0x7c4>)
 8002902:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002906:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 8108 	beq.w	8002b22 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002916:	2b02      	cmp	r3, #2
 8002918:	f040 80d0 	bne.w	8002abc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800291c:	4b83      	ldr	r3, [pc, #524]	; (8002b2c <HAL_RCC_OscConfig+0x7c4>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f003 0203 	and.w	r2, r3, #3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292c:	429a      	cmp	r2, r3
 800292e:	d130      	bne.n	8002992 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	3b01      	subs	r3, #1
 800293c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800293e:	429a      	cmp	r2, r3
 8002940:	d127      	bne.n	8002992 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800294e:	429a      	cmp	r2, r3
 8002950:	d11f      	bne.n	8002992 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800295c:	2a07      	cmp	r2, #7
 800295e:	bf14      	ite	ne
 8002960:	2201      	movne	r2, #1
 8002962:	2200      	moveq	r2, #0
 8002964:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002966:	4293      	cmp	r3, r2
 8002968:	d113      	bne.n	8002992 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002974:	085b      	lsrs	r3, r3, #1
 8002976:	3b01      	subs	r3, #1
 8002978:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800297a:	429a      	cmp	r2, r3
 800297c:	d109      	bne.n	8002992 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	085b      	lsrs	r3, r3, #1
 800298a:	3b01      	subs	r3, #1
 800298c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d06e      	beq.n	8002a70 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	2b0c      	cmp	r3, #12
 8002996:	d069      	beq.n	8002a6c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002998:	4b64      	ldr	r3, [pc, #400]	; (8002b2c <HAL_RCC_OscConfig+0x7c4>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d105      	bne.n	80029b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029a4:	4b61      	ldr	r3, [pc, #388]	; (8002b2c <HAL_RCC_OscConfig+0x7c4>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e0b7      	b.n	8002b24 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029b4:	4b5d      	ldr	r3, [pc, #372]	; (8002b2c <HAL_RCC_OscConfig+0x7c4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a5c      	ldr	r2, [pc, #368]	; (8002b2c <HAL_RCC_OscConfig+0x7c4>)
 80029ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029c0:	f7fd fec2 	bl	8000748 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c8:	f7fd febe 	bl	8000748 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e0a4      	b.n	8002b24 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029da:	4b54      	ldr	r3, [pc, #336]	; (8002b2c <HAL_RCC_OscConfig+0x7c4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f0      	bne.n	80029c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029e6:	4b51      	ldr	r3, [pc, #324]	; (8002b2c <HAL_RCC_OscConfig+0x7c4>)
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	4b51      	ldr	r3, [pc, #324]	; (8002b30 <HAL_RCC_OscConfig+0x7c8>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80029f6:	3a01      	subs	r2, #1
 80029f8:	0112      	lsls	r2, r2, #4
 80029fa:	4311      	orrs	r1, r2
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a00:	0212      	lsls	r2, r2, #8
 8002a02:	4311      	orrs	r1, r2
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a08:	0852      	lsrs	r2, r2, #1
 8002a0a:	3a01      	subs	r2, #1
 8002a0c:	0552      	lsls	r2, r2, #21
 8002a0e:	4311      	orrs	r1, r2
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a14:	0852      	lsrs	r2, r2, #1
 8002a16:	3a01      	subs	r2, #1
 8002a18:	0652      	lsls	r2, r2, #25
 8002a1a:	4311      	orrs	r1, r2
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a20:	0912      	lsrs	r2, r2, #4
 8002a22:	0452      	lsls	r2, r2, #17
 8002a24:	430a      	orrs	r2, r1
 8002a26:	4941      	ldr	r1, [pc, #260]	; (8002b2c <HAL_RCC_OscConfig+0x7c4>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a2c:	4b3f      	ldr	r3, [pc, #252]	; (8002b2c <HAL_RCC_OscConfig+0x7c4>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a3e      	ldr	r2, [pc, #248]	; (8002b2c <HAL_RCC_OscConfig+0x7c4>)
 8002a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a38:	4b3c      	ldr	r3, [pc, #240]	; (8002b2c <HAL_RCC_OscConfig+0x7c4>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4a3b      	ldr	r2, [pc, #236]	; (8002b2c <HAL_RCC_OscConfig+0x7c4>)
 8002a3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a44:	f7fd fe80 	bl	8000748 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4c:	f7fd fe7c 	bl	8000748 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e062      	b.n	8002b24 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a5e:	4b33      	ldr	r3, [pc, #204]	; (8002b2c <HAL_RCC_OscConfig+0x7c4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a6a:	e05a      	b.n	8002b22 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e059      	b.n	8002b24 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a70:	4b2e      	ldr	r3, [pc, #184]	; (8002b2c <HAL_RCC_OscConfig+0x7c4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d152      	bne.n	8002b22 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a7c:	4b2b      	ldr	r3, [pc, #172]	; (8002b2c <HAL_RCC_OscConfig+0x7c4>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a2a      	ldr	r2, [pc, #168]	; (8002b2c <HAL_RCC_OscConfig+0x7c4>)
 8002a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a88:	4b28      	ldr	r3, [pc, #160]	; (8002b2c <HAL_RCC_OscConfig+0x7c4>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	4a27      	ldr	r2, [pc, #156]	; (8002b2c <HAL_RCC_OscConfig+0x7c4>)
 8002a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a94:	f7fd fe58 	bl	8000748 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a9c:	f7fd fe54 	bl	8000748 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e03a      	b.n	8002b24 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aae:	4b1f      	ldr	r3, [pc, #124]	; (8002b2c <HAL_RCC_OscConfig+0x7c4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f0      	beq.n	8002a9c <HAL_RCC_OscConfig+0x734>
 8002aba:	e032      	b.n	8002b22 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	2b0c      	cmp	r3, #12
 8002ac0:	d02d      	beq.n	8002b1e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac2:	4b1a      	ldr	r3, [pc, #104]	; (8002b2c <HAL_RCC_OscConfig+0x7c4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a19      	ldr	r2, [pc, #100]	; (8002b2c <HAL_RCC_OscConfig+0x7c4>)
 8002ac8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002acc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002ace:	4b17      	ldr	r3, [pc, #92]	; (8002b2c <HAL_RCC_OscConfig+0x7c4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d105      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ada:	4b14      	ldr	r3, [pc, #80]	; (8002b2c <HAL_RCC_OscConfig+0x7c4>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	4a13      	ldr	r2, [pc, #76]	; (8002b2c <HAL_RCC_OscConfig+0x7c4>)
 8002ae0:	f023 0303 	bic.w	r3, r3, #3
 8002ae4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ae6:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <HAL_RCC_OscConfig+0x7c4>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	4a10      	ldr	r2, [pc, #64]	; (8002b2c <HAL_RCC_OscConfig+0x7c4>)
 8002aec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af6:	f7fd fe27 	bl	8000748 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002afe:	f7fd fe23 	bl	8000748 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e009      	b.n	8002b24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b10:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <HAL_RCC_OscConfig+0x7c4>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1f0      	bne.n	8002afe <HAL_RCC_OscConfig+0x796>
 8002b1c:	e001      	b.n	8002b22 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3720      	adds	r7, #32
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	f99d808c 	.word	0xf99d808c

08002b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0c8      	b.n	8002cda <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b48:	4b66      	ldr	r3, [pc, #408]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d910      	bls.n	8002b78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b56:	4b63      	ldr	r3, [pc, #396]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f023 0207 	bic.w	r2, r3, #7
 8002b5e:	4961      	ldr	r1, [pc, #388]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b0>)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b66:	4b5f      	ldr	r3, [pc, #380]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b0>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0b0      	b.n	8002cda <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d04c      	beq.n	8002c1e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d107      	bne.n	8002b9c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b8c:	4b56      	ldr	r3, [pc, #344]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d121      	bne.n	8002bdc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e09e      	b.n	8002cda <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d107      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ba4:	4b50      	ldr	r3, [pc, #320]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d115      	bne.n	8002bdc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e092      	b.n	8002cda <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d107      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bbc:	4b4a      	ldr	r3, [pc, #296]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d109      	bne.n	8002bdc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e086      	b.n	8002cda <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bcc:	4b46      	ldr	r3, [pc, #280]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e07e      	b.n	8002cda <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bdc:	4b42      	ldr	r3, [pc, #264]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f023 0203 	bic.w	r2, r3, #3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	493f      	ldr	r1, [pc, #252]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bee:	f7fd fdab 	bl	8000748 <HAL_GetTick>
 8002bf2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf4:	e00a      	b.n	8002c0c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf6:	f7fd fda7 	bl	8000748 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e066      	b.n	8002cda <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0c:	4b36      	ldr	r3, [pc, #216]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 020c 	and.w	r2, r3, #12
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d1eb      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d008      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c2a:	4b2f      	ldr	r3, [pc, #188]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	492c      	ldr	r1, [pc, #176]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c3c:	4b29      	ldr	r3, [pc, #164]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d210      	bcs.n	8002c6c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4a:	4b26      	ldr	r3, [pc, #152]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f023 0207 	bic.w	r2, r3, #7
 8002c52:	4924      	ldr	r1, [pc, #144]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b0>)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5a:	4b22      	ldr	r3, [pc, #136]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e036      	b.n	8002cda <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c78:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4918      	ldr	r1, [pc, #96]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d009      	beq.n	8002caa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c96:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4910      	ldr	r1, [pc, #64]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002caa:	f000 f825 	bl	8002cf8 <HAL_RCC_GetSysClockFreq>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	091b      	lsrs	r3, r3, #4
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	490c      	ldr	r1, [pc, #48]	; (8002cec <HAL_RCC_ClockConfig+0x1b8>)
 8002cbc:	5ccb      	ldrb	r3, [r1, r3]
 8002cbe:	f003 031f 	and.w	r3, r3, #31
 8002cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc6:	4a0a      	ldr	r2, [pc, #40]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cca:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fd fc1e 	bl	8000510 <HAL_InitTick>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	72fb      	strb	r3, [r7, #11]

  return status;
 8002cd8:	7afb      	ldrb	r3, [r7, #11]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40022000 	.word	0x40022000
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	08003f04 	.word	0x08003f04
 8002cf0:	20000000 	.word	0x20000000
 8002cf4:	20000004 	.word	0x20000004

08002cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b089      	sub	sp, #36	; 0x24
 8002cfc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61fb      	str	r3, [r7, #28]
 8002d02:	2300      	movs	r3, #0
 8002d04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d06:	4b3e      	ldr	r3, [pc, #248]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
 8002d0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d10:	4b3b      	ldr	r3, [pc, #236]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <HAL_RCC_GetSysClockFreq+0x34>
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	2b0c      	cmp	r3, #12
 8002d24:	d121      	bne.n	8002d6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d11e      	bne.n	8002d6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d2c:	4b34      	ldr	r3, [pc, #208]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d107      	bne.n	8002d48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d38:	4b31      	ldr	r3, [pc, #196]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d3e:	0a1b      	lsrs	r3, r3, #8
 8002d40:	f003 030f 	and.w	r3, r3, #15
 8002d44:	61fb      	str	r3, [r7, #28]
 8002d46:	e005      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d48:	4b2d      	ldr	r3, [pc, #180]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	091b      	lsrs	r3, r3, #4
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d54:	4a2b      	ldr	r2, [pc, #172]	; (8002e04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10d      	bne.n	8002d80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d68:	e00a      	b.n	8002d80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d102      	bne.n	8002d76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d70:	4b25      	ldr	r3, [pc, #148]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d72:	61bb      	str	r3, [r7, #24]
 8002d74:	e004      	b.n	8002d80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d101      	bne.n	8002d80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d7c:	4b23      	ldr	r3, [pc, #140]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x114>)
 8002d7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	2b0c      	cmp	r3, #12
 8002d84:	d134      	bne.n	8002df0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d86:	4b1e      	ldr	r3, [pc, #120]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d003      	beq.n	8002d9e <HAL_RCC_GetSysClockFreq+0xa6>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d003      	beq.n	8002da4 <HAL_RCC_GetSysClockFreq+0xac>
 8002d9c:	e005      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d9e:	4b1a      	ldr	r3, [pc, #104]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x110>)
 8002da0:	617b      	str	r3, [r7, #20]
      break;
 8002da2:	e005      	b.n	8002db0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002da4:	4b19      	ldr	r3, [pc, #100]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x114>)
 8002da6:	617b      	str	r3, [r7, #20]
      break;
 8002da8:	e002      	b.n	8002db0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	617b      	str	r3, [r7, #20]
      break;
 8002dae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002db0:	4b13      	ldr	r3, [pc, #76]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	3301      	adds	r3, #1
 8002dbc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002dbe:	4b10      	ldr	r3, [pc, #64]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	0a1b      	lsrs	r3, r3, #8
 8002dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	fb02 f203 	mul.w	r2, r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dd6:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	0e5b      	lsrs	r3, r3, #25
 8002ddc:	f003 0303 	and.w	r3, r3, #3
 8002de0:	3301      	adds	r3, #1
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002df0:	69bb      	ldr	r3, [r7, #24]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3724      	adds	r7, #36	; 0x24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	40021000 	.word	0x40021000
 8002e04:	08003f1c 	.word	0x08003f1c
 8002e08:	00f42400 	.word	0x00f42400
 8002e0c:	007a1200 	.word	0x007a1200

08002e10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e14:	4b03      	ldr	r3, [pc, #12]	; (8002e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e16:	681b      	ldr	r3, [r3, #0]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	20000000 	.word	0x20000000

08002e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e2c:	f7ff fff0 	bl	8002e10 <HAL_RCC_GetHCLKFreq>
 8002e30:	4602      	mov	r2, r0
 8002e32:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	0adb      	lsrs	r3, r3, #11
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	4904      	ldr	r1, [pc, #16]	; (8002e50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e3e:	5ccb      	ldrb	r3, [r1, r3]
 8002e40:	f003 031f 	and.w	r3, r3, #31
 8002e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	08003f14 	.word	0x08003f14

08002e54 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	220f      	movs	r2, #15
 8002e62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002e64:	4b12      	ldr	r3, [pc, #72]	; (8002eb0 <HAL_RCC_GetClockConfig+0x5c>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 0203 	and.w	r2, r3, #3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002e70:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <HAL_RCC_GetClockConfig+0x5c>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <HAL_RCC_GetClockConfig+0x5c>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002e88:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <HAL_RCC_GetClockConfig+0x5c>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	08db      	lsrs	r3, r3, #3
 8002e8e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002e96:	4b07      	ldr	r3, [pc, #28]	; (8002eb4 <HAL_RCC_GetClockConfig+0x60>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0207 	and.w	r2, r3, #7
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	601a      	str	r2, [r3, #0]
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40022000 	.word	0x40022000

08002eb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ec4:	4b2a      	ldr	r3, [pc, #168]	; (8002f70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ed0:	f7ff f9e6 	bl	80022a0 <HAL_PWREx_GetVoltageRange>
 8002ed4:	6178      	str	r0, [r7, #20]
 8002ed6:	e014      	b.n	8002f02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ed8:	4b25      	ldr	r3, [pc, #148]	; (8002f70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002edc:	4a24      	ldr	r2, [pc, #144]	; (8002f70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ee4:	4b22      	ldr	r3, [pc, #136]	; (8002f70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ef0:	f7ff f9d6 	bl	80022a0 <HAL_PWREx_GetVoltageRange>
 8002ef4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ef6:	4b1e      	ldr	r3, [pc, #120]	; (8002f70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efa:	4a1d      	ldr	r2, [pc, #116]	; (8002f70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f08:	d10b      	bne.n	8002f22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b80      	cmp	r3, #128	; 0x80
 8002f0e:	d919      	bls.n	8002f44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2ba0      	cmp	r3, #160	; 0xa0
 8002f14:	d902      	bls.n	8002f1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f16:	2302      	movs	r3, #2
 8002f18:	613b      	str	r3, [r7, #16]
 8002f1a:	e013      	b.n	8002f44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	e010      	b.n	8002f44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b80      	cmp	r3, #128	; 0x80
 8002f26:	d902      	bls.n	8002f2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f28:	2303      	movs	r3, #3
 8002f2a:	613b      	str	r3, [r7, #16]
 8002f2c:	e00a      	b.n	8002f44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b80      	cmp	r3, #128	; 0x80
 8002f32:	d102      	bne.n	8002f3a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f34:	2302      	movs	r3, #2
 8002f36:	613b      	str	r3, [r7, #16]
 8002f38:	e004      	b.n	8002f44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b70      	cmp	r3, #112	; 0x70
 8002f3e:	d101      	bne.n	8002f44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f40:	2301      	movs	r3, #1
 8002f42:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f44:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f023 0207 	bic.w	r2, r3, #7
 8002f4c:	4909      	ldr	r1, [pc, #36]	; (8002f74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f54:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d001      	beq.n	8002f66 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40021000 	.word	0x40021000
 8002f74:	40022000 	.word	0x40022000

08002f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f80:	2300      	movs	r3, #0
 8002f82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f84:	2300      	movs	r3, #0
 8002f86:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d041      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f9c:	d02a      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002f9e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fa2:	d824      	bhi.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fa4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fa8:	d008      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002faa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fae:	d81e      	bhi.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00a      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002fb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fb8:	d010      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fba:	e018      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fbc:	4b86      	ldr	r3, [pc, #536]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	4a85      	ldr	r2, [pc, #532]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fc8:	e015      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	3304      	adds	r3, #4
 8002fce:	2100      	movs	r1, #0
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 fabb 	bl	800354c <RCCEx_PLLSAI1_Config>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fda:	e00c      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3320      	adds	r3, #32
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 fba6 	bl	8003734 <RCCEx_PLLSAI2_Config>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fec:	e003      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	74fb      	strb	r3, [r7, #19]
      break;
 8002ff2:	e000      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ff4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ff6:	7cfb      	ldrb	r3, [r7, #19]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10b      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ffc:	4b76      	ldr	r3, [pc, #472]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003002:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800300a:	4973      	ldr	r1, [pc, #460]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800300c:	4313      	orrs	r3, r2
 800300e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003012:	e001      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003014:	7cfb      	ldrb	r3, [r7, #19]
 8003016:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d041      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003028:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800302c:	d02a      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800302e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003032:	d824      	bhi.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003034:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003038:	d008      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800303a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800303e:	d81e      	bhi.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00a      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003048:	d010      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800304a:	e018      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800304c:	4b62      	ldr	r3, [pc, #392]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	4a61      	ldr	r2, [pc, #388]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003056:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003058:	e015      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3304      	adds	r3, #4
 800305e:	2100      	movs	r1, #0
 8003060:	4618      	mov	r0, r3
 8003062:	f000 fa73 	bl	800354c <RCCEx_PLLSAI1_Config>
 8003066:	4603      	mov	r3, r0
 8003068:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800306a:	e00c      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3320      	adds	r3, #32
 8003070:	2100      	movs	r1, #0
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fb5e 	bl	8003734 <RCCEx_PLLSAI2_Config>
 8003078:	4603      	mov	r3, r0
 800307a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800307c:	e003      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	74fb      	strb	r3, [r7, #19]
      break;
 8003082:	e000      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003084:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003086:	7cfb      	ldrb	r3, [r7, #19]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10b      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800308c:	4b52      	ldr	r3, [pc, #328]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003092:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800309a:	494f      	ldr	r1, [pc, #316]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800309c:	4313      	orrs	r3, r2
 800309e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030a2:	e001      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a4:	7cfb      	ldrb	r3, [r7, #19]
 80030a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 80a0 	beq.w	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030b6:	2300      	movs	r3, #0
 80030b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030ba:	4b47      	ldr	r3, [pc, #284]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x152>
 80030c6:	2301      	movs	r3, #1
 80030c8:	e000      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80030ca:	2300      	movs	r3, #0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00d      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d0:	4b41      	ldr	r3, [pc, #260]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d4:	4a40      	ldr	r2, [pc, #256]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030da:	6593      	str	r3, [r2, #88]	; 0x58
 80030dc:	4b3e      	ldr	r3, [pc, #248]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030e8:	2301      	movs	r3, #1
 80030ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030ec:	4b3b      	ldr	r3, [pc, #236]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a3a      	ldr	r2, [pc, #232]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030f8:	f7fd fb26 	bl	8000748 <HAL_GetTick>
 80030fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030fe:	e009      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003100:	f7fd fb22 	bl	8000748 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d902      	bls.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	74fb      	strb	r3, [r7, #19]
        break;
 8003112:	e005      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003114:	4b31      	ldr	r3, [pc, #196]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0ef      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003120:	7cfb      	ldrb	r3, [r7, #19]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d15c      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003126:	4b2c      	ldr	r3, [pc, #176]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003130:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d01f      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	429a      	cmp	r2, r3
 8003142:	d019      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003144:	4b24      	ldr	r3, [pc, #144]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800314e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003150:	4b21      	ldr	r3, [pc, #132]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003156:	4a20      	ldr	r2, [pc, #128]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800315c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003160:	4b1d      	ldr	r3, [pc, #116]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003166:	4a1c      	ldr	r2, [pc, #112]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003168:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800316c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003170:	4a19      	ldr	r2, [pc, #100]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d016      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003182:	f7fd fae1 	bl	8000748 <HAL_GetTick>
 8003186:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003188:	e00b      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318a:	f7fd fadd 	bl	8000748 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	f241 3288 	movw	r2, #5000	; 0x1388
 8003198:	4293      	cmp	r3, r2
 800319a:	d902      	bls.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	74fb      	strb	r3, [r7, #19]
            break;
 80031a0:	e006      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031a2:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0ec      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80031b0:	7cfb      	ldrb	r3, [r7, #19]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10c      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031b6:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031c6:	4904      	ldr	r1, [pc, #16]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80031ce:	e009      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031d0:	7cfb      	ldrb	r3, [r7, #19]
 80031d2:	74bb      	strb	r3, [r7, #18]
 80031d4:	e006      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80031d6:	bf00      	nop
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e0:	7cfb      	ldrb	r3, [r7, #19]
 80031e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031e4:	7c7b      	ldrb	r3, [r7, #17]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d105      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ea:	4b9e      	ldr	r3, [pc, #632]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ee:	4a9d      	ldr	r2, [pc, #628]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003202:	4b98      	ldr	r3, [pc, #608]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003208:	f023 0203 	bic.w	r2, r3, #3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003210:	4994      	ldr	r1, [pc, #592]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00a      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003224:	4b8f      	ldr	r3, [pc, #572]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322a:	f023 020c 	bic.w	r2, r3, #12
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003232:	498c      	ldr	r1, [pc, #560]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003234:	4313      	orrs	r3, r2
 8003236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003246:	4b87      	ldr	r3, [pc, #540]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	4983      	ldr	r1, [pc, #524]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003256:	4313      	orrs	r3, r2
 8003258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0308 	and.w	r3, r3, #8
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00a      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003268:	4b7e      	ldr	r3, [pc, #504]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	497b      	ldr	r1, [pc, #492]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003278:	4313      	orrs	r3, r2
 800327a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0310 	and.w	r3, r3, #16
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00a      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800328a:	4b76      	ldr	r3, [pc, #472]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003290:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003298:	4972      	ldr	r1, [pc, #456]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329a:	4313      	orrs	r3, r2
 800329c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0320 	and.w	r3, r3, #32
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00a      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032ac:	4b6d      	ldr	r3, [pc, #436]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ba:	496a      	ldr	r1, [pc, #424]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00a      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032ce:	4b65      	ldr	r3, [pc, #404]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032dc:	4961      	ldr	r1, [pc, #388]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00a      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032f0:	4b5c      	ldr	r3, [pc, #368]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032fe:	4959      	ldr	r1, [pc, #356]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003300:	4313      	orrs	r3, r2
 8003302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003312:	4b54      	ldr	r3, [pc, #336]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003318:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003320:	4950      	ldr	r1, [pc, #320]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003322:	4313      	orrs	r3, r2
 8003324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00a      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003334:	4b4b      	ldr	r3, [pc, #300]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003342:	4948      	ldr	r1, [pc, #288]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003344:	4313      	orrs	r3, r2
 8003346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00a      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003356:	4b43      	ldr	r3, [pc, #268]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003364:	493f      	ldr	r1, [pc, #252]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d028      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003378:	4b3a      	ldr	r3, [pc, #232]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003386:	4937      	ldr	r1, [pc, #220]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003388:	4313      	orrs	r3, r2
 800338a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003392:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003396:	d106      	bne.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003398:	4b32      	ldr	r3, [pc, #200]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	4a31      	ldr	r2, [pc, #196]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033a2:	60d3      	str	r3, [r2, #12]
 80033a4:	e011      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033ae:	d10c      	bne.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3304      	adds	r3, #4
 80033b4:	2101      	movs	r1, #1
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 f8c8 	bl	800354c <RCCEx_PLLSAI1_Config>
 80033bc:	4603      	mov	r3, r0
 80033be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033c0:	7cfb      	ldrb	r3, [r7, #19]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80033c6:	7cfb      	ldrb	r3, [r7, #19]
 80033c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d028      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033d6:	4b23      	ldr	r3, [pc, #140]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e4:	491f      	ldr	r1, [pc, #124]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033f4:	d106      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033f6:	4b1b      	ldr	r3, [pc, #108]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	4a1a      	ldr	r2, [pc, #104]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003400:	60d3      	str	r3, [r2, #12]
 8003402:	e011      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003408:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800340c:	d10c      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3304      	adds	r3, #4
 8003412:	2101      	movs	r1, #1
 8003414:	4618      	mov	r0, r3
 8003416:	f000 f899 	bl	800354c <RCCEx_PLLSAI1_Config>
 800341a:	4603      	mov	r3, r0
 800341c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800341e:	7cfb      	ldrb	r3, [r7, #19]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003424:	7cfb      	ldrb	r3, [r7, #19]
 8003426:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d02b      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003434:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003442:	4908      	ldr	r1, [pc, #32]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800344e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003452:	d109      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003454:	4b03      	ldr	r3, [pc, #12]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	4a02      	ldr	r2, [pc, #8]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800345e:	60d3      	str	r3, [r2, #12]
 8003460:	e014      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003462:	bf00      	nop
 8003464:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800346c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003470:	d10c      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3304      	adds	r3, #4
 8003476:	2101      	movs	r1, #1
 8003478:	4618      	mov	r0, r3
 800347a:	f000 f867 	bl	800354c <RCCEx_PLLSAI1_Config>
 800347e:	4603      	mov	r3, r0
 8003480:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003482:	7cfb      	ldrb	r3, [r7, #19]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003488:	7cfb      	ldrb	r3, [r7, #19]
 800348a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d02f      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003498:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800349a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034a6:	4928      	ldr	r1, [pc, #160]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034b6:	d10d      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3304      	adds	r3, #4
 80034bc:	2102      	movs	r1, #2
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 f844 	bl	800354c <RCCEx_PLLSAI1_Config>
 80034c4:	4603      	mov	r3, r0
 80034c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034c8:	7cfb      	ldrb	r3, [r7, #19]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d014      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034ce:	7cfb      	ldrb	r3, [r7, #19]
 80034d0:	74bb      	strb	r3, [r7, #18]
 80034d2:	e011      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034dc:	d10c      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3320      	adds	r3, #32
 80034e2:	2102      	movs	r1, #2
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 f925 	bl	8003734 <RCCEx_PLLSAI2_Config>
 80034ea:	4603      	mov	r3, r0
 80034ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034ee:	7cfb      	ldrb	r3, [r7, #19]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034f4:	7cfb      	ldrb	r3, [r7, #19]
 80034f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00a      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003504:	4b10      	ldr	r3, [pc, #64]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003512:	490d      	ldr	r1, [pc, #52]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00b      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003526:	4b08      	ldr	r3, [pc, #32]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003536:	4904      	ldr	r1, [pc, #16]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003538:	4313      	orrs	r3, r2
 800353a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800353e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40021000 	.word	0x40021000

0800354c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003556:	2300      	movs	r3, #0
 8003558:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800355a:	4b75      	ldr	r3, [pc, #468]	; (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d018      	beq.n	8003598 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003566:	4b72      	ldr	r3, [pc, #456]	; (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f003 0203 	and.w	r2, r3, #3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	429a      	cmp	r2, r3
 8003574:	d10d      	bne.n	8003592 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
       ||
 800357a:	2b00      	cmp	r3, #0
 800357c:	d009      	beq.n	8003592 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800357e:	4b6c      	ldr	r3, [pc, #432]	; (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	091b      	lsrs	r3, r3, #4
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
       ||
 800358e:	429a      	cmp	r2, r3
 8003590:	d047      	beq.n	8003622 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	73fb      	strb	r3, [r7, #15]
 8003596:	e044      	b.n	8003622 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b03      	cmp	r3, #3
 800359e:	d018      	beq.n	80035d2 <RCCEx_PLLSAI1_Config+0x86>
 80035a0:	2b03      	cmp	r3, #3
 80035a2:	d825      	bhi.n	80035f0 <RCCEx_PLLSAI1_Config+0xa4>
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d002      	beq.n	80035ae <RCCEx_PLLSAI1_Config+0x62>
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d009      	beq.n	80035c0 <RCCEx_PLLSAI1_Config+0x74>
 80035ac:	e020      	b.n	80035f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035ae:	4b60      	ldr	r3, [pc, #384]	; (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d11d      	bne.n	80035f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035be:	e01a      	b.n	80035f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035c0:	4b5b      	ldr	r3, [pc, #364]	; (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d116      	bne.n	80035fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035d0:	e013      	b.n	80035fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035d2:	4b57      	ldr	r3, [pc, #348]	; (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10f      	bne.n	80035fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035de:	4b54      	ldr	r3, [pc, #336]	; (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d109      	bne.n	80035fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035ee:	e006      	b.n	80035fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	73fb      	strb	r3, [r7, #15]
      break;
 80035f4:	e004      	b.n	8003600 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035f6:	bf00      	nop
 80035f8:	e002      	b.n	8003600 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035fa:	bf00      	nop
 80035fc:	e000      	b.n	8003600 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003600:	7bfb      	ldrb	r3, [r7, #15]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10d      	bne.n	8003622 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003606:	4b4a      	ldr	r3, [pc, #296]	; (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6819      	ldr	r1, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	3b01      	subs	r3, #1
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	430b      	orrs	r3, r1
 800361c:	4944      	ldr	r1, [pc, #272]	; (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 800361e:	4313      	orrs	r3, r2
 8003620:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003622:	7bfb      	ldrb	r3, [r7, #15]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d17d      	bne.n	8003724 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003628:	4b41      	ldr	r3, [pc, #260]	; (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a40      	ldr	r2, [pc, #256]	; (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 800362e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003632:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003634:	f7fd f888 	bl	8000748 <HAL_GetTick>
 8003638:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800363a:	e009      	b.n	8003650 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800363c:	f7fd f884 	bl	8000748 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d902      	bls.n	8003650 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	73fb      	strb	r3, [r7, #15]
        break;
 800364e:	e005      	b.n	800365c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003650:	4b37      	ldr	r3, [pc, #220]	; (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1ef      	bne.n	800363c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d160      	bne.n	8003724 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d111      	bne.n	800368c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003668:	4b31      	ldr	r3, [pc, #196]	; (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6892      	ldr	r2, [r2, #8]
 8003678:	0211      	lsls	r1, r2, #8
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	68d2      	ldr	r2, [r2, #12]
 800367e:	0912      	lsrs	r2, r2, #4
 8003680:	0452      	lsls	r2, r2, #17
 8003682:	430a      	orrs	r2, r1
 8003684:	492a      	ldr	r1, [pc, #168]	; (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003686:	4313      	orrs	r3, r2
 8003688:	610b      	str	r3, [r1, #16]
 800368a:	e027      	b.n	80036dc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d112      	bne.n	80036b8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003692:	4b27      	ldr	r3, [pc, #156]	; (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800369a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6892      	ldr	r2, [r2, #8]
 80036a2:	0211      	lsls	r1, r2, #8
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6912      	ldr	r2, [r2, #16]
 80036a8:	0852      	lsrs	r2, r2, #1
 80036aa:	3a01      	subs	r2, #1
 80036ac:	0552      	lsls	r2, r2, #21
 80036ae:	430a      	orrs	r2, r1
 80036b0:	491f      	ldr	r1, [pc, #124]	; (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	610b      	str	r3, [r1, #16]
 80036b6:	e011      	b.n	80036dc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036b8:	4b1d      	ldr	r3, [pc, #116]	; (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6892      	ldr	r2, [r2, #8]
 80036c8:	0211      	lsls	r1, r2, #8
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6952      	ldr	r2, [r2, #20]
 80036ce:	0852      	lsrs	r2, r2, #1
 80036d0:	3a01      	subs	r2, #1
 80036d2:	0652      	lsls	r2, r2, #25
 80036d4:	430a      	orrs	r2, r1
 80036d6:	4916      	ldr	r1, [pc, #88]	; (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036dc:	4b14      	ldr	r3, [pc, #80]	; (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a13      	ldr	r2, [pc, #76]	; (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e8:	f7fd f82e 	bl	8000748 <HAL_GetTick>
 80036ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036ee:	e009      	b.n	8003704 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036f0:	f7fd f82a 	bl	8000748 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d902      	bls.n	8003704 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	73fb      	strb	r3, [r7, #15]
          break;
 8003702:	e005      	b.n	8003710 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003704:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0ef      	beq.n	80036f0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003716:	4b06      	ldr	r3, [pc, #24]	; (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003718:	691a      	ldr	r2, [r3, #16]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	4904      	ldr	r1, [pc, #16]	; (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003720:	4313      	orrs	r3, r2
 8003722:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003724:	7bfb      	ldrb	r3, [r7, #15]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40021000 	.word	0x40021000

08003734 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003742:	4b6a      	ldr	r3, [pc, #424]	; (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d018      	beq.n	8003780 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800374e:	4b67      	ldr	r3, [pc, #412]	; (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f003 0203 	and.w	r2, r3, #3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d10d      	bne.n	800377a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
       ||
 8003762:	2b00      	cmp	r3, #0
 8003764:	d009      	beq.n	800377a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003766:	4b61      	ldr	r3, [pc, #388]	; (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	091b      	lsrs	r3, r3, #4
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
       ||
 8003776:	429a      	cmp	r2, r3
 8003778:	d047      	beq.n	800380a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	73fb      	strb	r3, [r7, #15]
 800377e:	e044      	b.n	800380a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b03      	cmp	r3, #3
 8003786:	d018      	beq.n	80037ba <RCCEx_PLLSAI2_Config+0x86>
 8003788:	2b03      	cmp	r3, #3
 800378a:	d825      	bhi.n	80037d8 <RCCEx_PLLSAI2_Config+0xa4>
 800378c:	2b01      	cmp	r3, #1
 800378e:	d002      	beq.n	8003796 <RCCEx_PLLSAI2_Config+0x62>
 8003790:	2b02      	cmp	r3, #2
 8003792:	d009      	beq.n	80037a8 <RCCEx_PLLSAI2_Config+0x74>
 8003794:	e020      	b.n	80037d8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003796:	4b55      	ldr	r3, [pc, #340]	; (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d11d      	bne.n	80037de <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a6:	e01a      	b.n	80037de <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037a8:	4b50      	ldr	r3, [pc, #320]	; (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d116      	bne.n	80037e2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037b8:	e013      	b.n	80037e2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037ba:	4b4c      	ldr	r3, [pc, #304]	; (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10f      	bne.n	80037e6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037c6:	4b49      	ldr	r3, [pc, #292]	; (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d109      	bne.n	80037e6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037d6:	e006      	b.n	80037e6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	73fb      	strb	r3, [r7, #15]
      break;
 80037dc:	e004      	b.n	80037e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037de:	bf00      	nop
 80037e0:	e002      	b.n	80037e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037e2:	bf00      	nop
 80037e4:	e000      	b.n	80037e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10d      	bne.n	800380a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037ee:	4b3f      	ldr	r3, [pc, #252]	; (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6819      	ldr	r1, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	3b01      	subs	r3, #1
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	430b      	orrs	r3, r1
 8003804:	4939      	ldr	r1, [pc, #228]	; (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003806:	4313      	orrs	r3, r2
 8003808:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800380a:	7bfb      	ldrb	r3, [r7, #15]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d167      	bne.n	80038e0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003810:	4b36      	ldr	r3, [pc, #216]	; (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a35      	ldr	r2, [pc, #212]	; (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003816:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800381a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800381c:	f7fc ff94 	bl	8000748 <HAL_GetTick>
 8003820:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003822:	e009      	b.n	8003838 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003824:	f7fc ff90 	bl	8000748 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d902      	bls.n	8003838 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	73fb      	strb	r3, [r7, #15]
        break;
 8003836:	e005      	b.n	8003844 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003838:	4b2c      	ldr	r3, [pc, #176]	; (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1ef      	bne.n	8003824 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d14a      	bne.n	80038e0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d111      	bne.n	8003874 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003850:	4b26      	ldr	r3, [pc, #152]	; (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6892      	ldr	r2, [r2, #8]
 8003860:	0211      	lsls	r1, r2, #8
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	68d2      	ldr	r2, [r2, #12]
 8003866:	0912      	lsrs	r2, r2, #4
 8003868:	0452      	lsls	r2, r2, #17
 800386a:	430a      	orrs	r2, r1
 800386c:	491f      	ldr	r1, [pc, #124]	; (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800386e:	4313      	orrs	r3, r2
 8003870:	614b      	str	r3, [r1, #20]
 8003872:	e011      	b.n	8003898 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003874:	4b1d      	ldr	r3, [pc, #116]	; (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800387c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6892      	ldr	r2, [r2, #8]
 8003884:	0211      	lsls	r1, r2, #8
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6912      	ldr	r2, [r2, #16]
 800388a:	0852      	lsrs	r2, r2, #1
 800388c:	3a01      	subs	r2, #1
 800388e:	0652      	lsls	r2, r2, #25
 8003890:	430a      	orrs	r2, r1
 8003892:	4916      	ldr	r1, [pc, #88]	; (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003894:	4313      	orrs	r3, r2
 8003896:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003898:	4b14      	ldr	r3, [pc, #80]	; (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a13      	ldr	r2, [pc, #76]	; (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800389e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a4:	f7fc ff50 	bl	8000748 <HAL_GetTick>
 80038a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038aa:	e009      	b.n	80038c0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038ac:	f7fc ff4c 	bl	8000748 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d902      	bls.n	80038c0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	73fb      	strb	r3, [r7, #15]
          break;
 80038be:	e005      	b.n	80038cc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038c0:	4b0a      	ldr	r3, [pc, #40]	; (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0ef      	beq.n	80038ac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d106      	bne.n	80038e0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80038d2:	4b06      	ldr	r3, [pc, #24]	; (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d4:	695a      	ldr	r2, [r3, #20]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	4904      	ldr	r1, [pc, #16]	; (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40021000 	.word	0x40021000

080038f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e049      	b.n	8003996 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d106      	bne.n	800391c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f841 	bl	800399e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3304      	adds	r3, #4
 800392c:	4619      	mov	r1, r3
 800392e:	4610      	mov	r0, r2
 8003930:	f000 f9f8 	bl	8003d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800399e:	b480      	push	{r7}
 80039a0:	b083      	sub	sp, #12
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80039a6:	bf00      	nop
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
	...

080039b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d001      	beq.n	80039cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e04f      	b.n	8003a6c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0201 	orr.w	r2, r2, #1
 80039e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a23      	ldr	r2, [pc, #140]	; (8003a78 <HAL_TIM_Base_Start_IT+0xc4>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d01d      	beq.n	8003a2a <HAL_TIM_Base_Start_IT+0x76>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f6:	d018      	beq.n	8003a2a <HAL_TIM_Base_Start_IT+0x76>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a1f      	ldr	r2, [pc, #124]	; (8003a7c <HAL_TIM_Base_Start_IT+0xc8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d013      	beq.n	8003a2a <HAL_TIM_Base_Start_IT+0x76>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a1e      	ldr	r2, [pc, #120]	; (8003a80 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d00e      	beq.n	8003a2a <HAL_TIM_Base_Start_IT+0x76>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a1c      	ldr	r2, [pc, #112]	; (8003a84 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d009      	beq.n	8003a2a <HAL_TIM_Base_Start_IT+0x76>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a1b      	ldr	r2, [pc, #108]	; (8003a88 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d004      	beq.n	8003a2a <HAL_TIM_Base_Start_IT+0x76>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a19      	ldr	r2, [pc, #100]	; (8003a8c <HAL_TIM_Base_Start_IT+0xd8>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d115      	bne.n	8003a56 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	4b17      	ldr	r3, [pc, #92]	; (8003a90 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b06      	cmp	r3, #6
 8003a3a:	d015      	beq.n	8003a68 <HAL_TIM_Base_Start_IT+0xb4>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a42:	d011      	beq.n	8003a68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a54:	e008      	b.n	8003a68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0201 	orr.w	r2, r2, #1
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	e000      	b.n	8003a6a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	40012c00 	.word	0x40012c00
 8003a7c:	40000400 	.word	0x40000400
 8003a80:	40000800 	.word	0x40000800
 8003a84:	40000c00 	.word	0x40000c00
 8003a88:	40013400 	.word	0x40013400
 8003a8c:	40014000 	.word	0x40014000
 8003a90:	00010007 	.word	0x00010007

08003a94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d122      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d11b      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f06f 0202 	mvn.w	r2, #2
 8003ac0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f905 	bl	8003ce6 <HAL_TIM_IC_CaptureCallback>
 8003adc:	e005      	b.n	8003aea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f8f7 	bl	8003cd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f908 	bl	8003cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d122      	bne.n	8003b44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d11b      	bne.n	8003b44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f06f 0204 	mvn.w	r2, #4
 8003b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2202      	movs	r2, #2
 8003b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f8db 	bl	8003ce6 <HAL_TIM_IC_CaptureCallback>
 8003b30:	e005      	b.n	8003b3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f8cd 	bl	8003cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f8de 	bl	8003cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d122      	bne.n	8003b98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d11b      	bne.n	8003b98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f06f 0208 	mvn.w	r2, #8
 8003b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2204      	movs	r2, #4
 8003b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f8b1 	bl	8003ce6 <HAL_TIM_IC_CaptureCallback>
 8003b84:	e005      	b.n	8003b92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f8a3 	bl	8003cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f8b4 	bl	8003cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f003 0310 	and.w	r3, r3, #16
 8003ba2:	2b10      	cmp	r3, #16
 8003ba4:	d122      	bne.n	8003bec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b10      	cmp	r3, #16
 8003bb2:	d11b      	bne.n	8003bec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f06f 0210 	mvn.w	r2, #16
 8003bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2208      	movs	r2, #8
 8003bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f887 	bl	8003ce6 <HAL_TIM_IC_CaptureCallback>
 8003bd8:	e005      	b.n	8003be6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f879 	bl	8003cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f88a 	bl	8003cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d10e      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d107      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f06f 0201 	mvn.w	r2, #1
 8003c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fc fbd6 	bl	80003c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c22:	2b80      	cmp	r3, #128	; 0x80
 8003c24:	d10e      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c30:	2b80      	cmp	r3, #128	; 0x80
 8003c32:	d107      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f914 	bl	8003e6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c52:	d10e      	bne.n	8003c72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5e:	2b80      	cmp	r3, #128	; 0x80
 8003c60:	d107      	bne.n	8003c72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f907 	bl	8003e80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7c:	2b40      	cmp	r3, #64	; 0x40
 8003c7e:	d10e      	bne.n	8003c9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8a:	2b40      	cmp	r3, #64	; 0x40
 8003c8c:	d107      	bne.n	8003c9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f838 	bl	8003d0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	f003 0320 	and.w	r3, r3, #32
 8003ca8:	2b20      	cmp	r3, #32
 8003caa:	d10e      	bne.n	8003cca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	2b20      	cmp	r3, #32
 8003cb8:	d107      	bne.n	8003cca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f06f 0220 	mvn.w	r2, #32
 8003cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f8c7 	bl	8003e58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cca:	bf00      	nop
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
	...

08003d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a40      	ldr	r2, [pc, #256]	; (8003e38 <TIM_Base_SetConfig+0x114>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d013      	beq.n	8003d64 <TIM_Base_SetConfig+0x40>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d42:	d00f      	beq.n	8003d64 <TIM_Base_SetConfig+0x40>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a3d      	ldr	r2, [pc, #244]	; (8003e3c <TIM_Base_SetConfig+0x118>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00b      	beq.n	8003d64 <TIM_Base_SetConfig+0x40>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a3c      	ldr	r2, [pc, #240]	; (8003e40 <TIM_Base_SetConfig+0x11c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d007      	beq.n	8003d64 <TIM_Base_SetConfig+0x40>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a3b      	ldr	r2, [pc, #236]	; (8003e44 <TIM_Base_SetConfig+0x120>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d003      	beq.n	8003d64 <TIM_Base_SetConfig+0x40>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a3a      	ldr	r2, [pc, #232]	; (8003e48 <TIM_Base_SetConfig+0x124>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d108      	bne.n	8003d76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a2f      	ldr	r2, [pc, #188]	; (8003e38 <TIM_Base_SetConfig+0x114>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d01f      	beq.n	8003dbe <TIM_Base_SetConfig+0x9a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d84:	d01b      	beq.n	8003dbe <TIM_Base_SetConfig+0x9a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a2c      	ldr	r2, [pc, #176]	; (8003e3c <TIM_Base_SetConfig+0x118>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d017      	beq.n	8003dbe <TIM_Base_SetConfig+0x9a>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a2b      	ldr	r2, [pc, #172]	; (8003e40 <TIM_Base_SetConfig+0x11c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d013      	beq.n	8003dbe <TIM_Base_SetConfig+0x9a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a2a      	ldr	r2, [pc, #168]	; (8003e44 <TIM_Base_SetConfig+0x120>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d00f      	beq.n	8003dbe <TIM_Base_SetConfig+0x9a>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a29      	ldr	r2, [pc, #164]	; (8003e48 <TIM_Base_SetConfig+0x124>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00b      	beq.n	8003dbe <TIM_Base_SetConfig+0x9a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a28      	ldr	r2, [pc, #160]	; (8003e4c <TIM_Base_SetConfig+0x128>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d007      	beq.n	8003dbe <TIM_Base_SetConfig+0x9a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a27      	ldr	r2, [pc, #156]	; (8003e50 <TIM_Base_SetConfig+0x12c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d003      	beq.n	8003dbe <TIM_Base_SetConfig+0x9a>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a26      	ldr	r2, [pc, #152]	; (8003e54 <TIM_Base_SetConfig+0x130>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d108      	bne.n	8003dd0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a10      	ldr	r2, [pc, #64]	; (8003e38 <TIM_Base_SetConfig+0x114>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00f      	beq.n	8003e1c <TIM_Base_SetConfig+0xf8>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a12      	ldr	r2, [pc, #72]	; (8003e48 <TIM_Base_SetConfig+0x124>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d00b      	beq.n	8003e1c <TIM_Base_SetConfig+0xf8>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a11      	ldr	r2, [pc, #68]	; (8003e4c <TIM_Base_SetConfig+0x128>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d007      	beq.n	8003e1c <TIM_Base_SetConfig+0xf8>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a10      	ldr	r2, [pc, #64]	; (8003e50 <TIM_Base_SetConfig+0x12c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d003      	beq.n	8003e1c <TIM_Base_SetConfig+0xf8>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a0f      	ldr	r2, [pc, #60]	; (8003e54 <TIM_Base_SetConfig+0x130>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d103      	bne.n	8003e24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	691a      	ldr	r2, [r3, #16]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	615a      	str	r2, [r3, #20]
}
 8003e2a:	bf00      	nop
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40012c00 	.word	0x40012c00
 8003e3c:	40000400 	.word	0x40000400
 8003e40:	40000800 	.word	0x40000800
 8003e44:	40000c00 	.word	0x40000c00
 8003e48:	40013400 	.word	0x40013400
 8003e4c:	40014000 	.word	0x40014000
 8003e50:	40014400 	.word	0x40014400
 8003e54:	40014800 	.word	0x40014800

08003e58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <__libc_init_array>:
 8003e94:	b570      	push	{r4, r5, r6, lr}
 8003e96:	4d0d      	ldr	r5, [pc, #52]	; (8003ecc <__libc_init_array+0x38>)
 8003e98:	4c0d      	ldr	r4, [pc, #52]	; (8003ed0 <__libc_init_array+0x3c>)
 8003e9a:	1b64      	subs	r4, r4, r5
 8003e9c:	10a4      	asrs	r4, r4, #2
 8003e9e:	2600      	movs	r6, #0
 8003ea0:	42a6      	cmp	r6, r4
 8003ea2:	d109      	bne.n	8003eb8 <__libc_init_array+0x24>
 8003ea4:	4d0b      	ldr	r5, [pc, #44]	; (8003ed4 <__libc_init_array+0x40>)
 8003ea6:	4c0c      	ldr	r4, [pc, #48]	; (8003ed8 <__libc_init_array+0x44>)
 8003ea8:	f000 f820 	bl	8003eec <_init>
 8003eac:	1b64      	subs	r4, r4, r5
 8003eae:	10a4      	asrs	r4, r4, #2
 8003eb0:	2600      	movs	r6, #0
 8003eb2:	42a6      	cmp	r6, r4
 8003eb4:	d105      	bne.n	8003ec2 <__libc_init_array+0x2e>
 8003eb6:	bd70      	pop	{r4, r5, r6, pc}
 8003eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ebc:	4798      	blx	r3
 8003ebe:	3601      	adds	r6, #1
 8003ec0:	e7ee      	b.n	8003ea0 <__libc_init_array+0xc>
 8003ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec6:	4798      	blx	r3
 8003ec8:	3601      	adds	r6, #1
 8003eca:	e7f2      	b.n	8003eb2 <__libc_init_array+0x1e>
 8003ecc:	08003f4c 	.word	0x08003f4c
 8003ed0:	08003f4c 	.word	0x08003f4c
 8003ed4:	08003f4c 	.word	0x08003f4c
 8003ed8:	08003f50 	.word	0x08003f50

08003edc <memset>:
 8003edc:	4402      	add	r2, r0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d100      	bne.n	8003ee6 <memset+0xa>
 8003ee4:	4770      	bx	lr
 8003ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eea:	e7f9      	b.n	8003ee0 <memset+0x4>

08003eec <_init>:
 8003eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eee:	bf00      	nop
 8003ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ef2:	bc08      	pop	{r3}
 8003ef4:	469e      	mov	lr, r3
 8003ef6:	4770      	bx	lr

08003ef8 <_fini>:
 8003ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efa:	bf00      	nop
 8003efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efe:	bc08      	pop	{r3}
 8003f00:	469e      	mov	lr, r3
 8003f02:	4770      	bx	lr
